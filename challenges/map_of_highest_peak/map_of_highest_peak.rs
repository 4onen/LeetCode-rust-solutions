// https://leetcode.com/problems/map-of-highest-peak/

pub struct Solution;

impl Solution {
    pub fn highest_peak(mut is_water: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
        let m = is_water.len() as u16;
        let n = is_water[0].len() as u16;
        let mut curr = std::collections::HashSet::new();
        let mut next = std::collections::HashSet::new();
        for i in 0..m {
            for j in 0..n {
                if is_water[i as usize][j as usize] == 1 {
                    next.insert((i, j));
                    is_water[i as usize][j as usize] = 0;
                } else {
                    is_water[i as usize][j as usize] = -1;
                }
            }
        }
        let mut result = is_water;
        let mut generation = 1;
        loop {
            std::mem::swap(&mut curr, &mut next);
            if curr.is_empty() {
                break result;
            }
            for &(i, j) in curr.iter() {
                if i > 0 && result[i as usize - 1][j as usize] < 0 {
                    result[i as usize - 1][j as usize] = generation;
                    next.insert((i - 1, j));
                }
                if j > 0 && result[i as usize][j as usize - 1] < 0 {
                    result[i as usize][j as usize - 1] = generation;
                    next.insert((i, j - 1));
                }
                if i < m - 1 && result[1 + i as usize][j as usize] < 0 {
                    result[1 + i as usize][j as usize] = generation;
                    next.insert((1 + i, j));
                }
                if j < n - 1 && result[i as usize][1 + j as usize] < 0 {
                    result[i as usize][1 + j as usize] = generation;
                    next.insert((i, j + 1));
                }
            }
            curr.clear();
            generation += 1;
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn test_one(is_water: &[&[i32]], expected_peak: u16) {
        assert!(is_water.len() >= 1);
        assert!(is_water.len() <= 1000);
        assert!(is_water[0].len() >= 1);
        assert!(is_water[0].len() <= 1000);
        let mut water = 0;
        for &row in is_water {
            assert_eq!(row.len(), is_water[0].len());
            for &cell in row {
                assert!(cell == 0 || cell == 1);
                water += cell;
            }
        }
        assert!(water >= 1);
        let result = Solution::highest_peak(is_water.iter().map(|&x| x.to_vec()).collect());
        assert_eq!(is_water.len(), result.len());
        let mut max = 0;
        for i in 0..is_water.len() {
            assert_eq!(is_water[i].len(), result[i].len());
            for j in 0..is_water[i].len() {
                if is_water[i][j] == 1 {
                    assert_eq!(result[i][j], 0);
                } else {
                    assert!(result[i][j] >= 1);
                    if result[i][j] > max {
                        max = result[i][j];
                    }
                }
            }
        }
        assert_eq!(max as u16, expected_peak);
    }

    fn test(is_water: &[&[i32]], expected_peak: u16) {
        {
            test_one(is_water, expected_peak);
        }
        {
            let mut vert_flip = is_water.to_vec();
            vert_flip.reverse();
            test_one(&vert_flip, expected_peak);
        }
    }

    #[test]
    fn ex1() {
        test(&[&[0, 1], &[0, 0]], 2)
    }

    #[test]
    fn ex2() {
        test(&[&[0, 0, 1], &[1, 0, 0], &[0, 0, 0]], 2)
    }

    #[test]
    fn myex1() {
        test(&[&[0, 0, 0], &[1, 1, 0], &[0, 0, 0]], 2)
    }

    #[test]
    fn discussion_case1() {
        test(&[&[1]], 0)
    }

    #[test]
    fn discussion_case2() {
        test(&[&[1], &[0]], 1)
    }

    #[test]
    fn discussion_case2_1() {
        test(&[&[1, 0]], 1)
    }

    #[test]
    fn discussion_case3() {
        test(&[&[0], &[0], &[0], &[0], &[1], &[0], &[0], &[1], &[1]], 4)
    }

    #[test]
    fn discussion_case4() {
        test(
            &[
                &[1, 1, 1, 1, 0],
                &[1, 1, 1, 1, 1],
                &[1, 1, 1, 0, 1],
                &[1, 1, 1, 1, 0],
                &[1, 1, 1, 1, 1],
                &[1, 1, 1, 1, 1],
            ],
            1,
        )
    }

    #[test]
    fn discussion_case5() {
        test(
            &[
                &[0, 0, 0, 0, 0, 0, 1, 0],
                &[0, 1, 0, 0, 0, 0, 0, 0],
                &[0, 0, 0, 0, 0, 0, 0, 0],
                &[0, 0, 0, 0, 0, 0, 0, 0],
                &[0, 0, 0, 0, 0, 0, 0, 0],
                &[0, 0, 0, 0, 0, 0, 0, 0],
                &[0, 0, 0, 0, 0, 0, 1, 0],
                &[0, 0, 1, 0, 0, 0, 0, 0],
            ],
            5,
        )
    }

    #[test]
    fn discussion_case6() {
        test(
            &[
                &[0, 0, 0, 1, 0],
                &[1, 1, 0, 0, 0],
                &[1, 1, 1, 1, 0],
                &[1, 1, 0, 0, 1],
                &[1, 1, 0, 0, 1],
                &[1, 1, 0, 1, 0],
                &[0, 1, 0, 0, 0],
                &[1, 1, 1, 0, 0],
                &[0, 1, 1, 1, 1],
                &[1, 1, 1, 1, 0],
                &[0, 0, 1, 1, 0],
                &[0, 1, 1, 1, 1],
                &[0, 0, 1, 0, 0],
                &[0, 1, 1, 1, 1],
                &[0, 0, 0, 1, 1],
                &[0, 1, 1, 1, 0],
            ],
            2,
        )
    }

    #[test]
    fn discussion_case7() {
        test(
            &[
                &[1, 0, 1, 1, 0, 1, 1, 0, 0, 0],
                &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                &[0, 1, 0, 0, 0, 0, 1, 1, 0, 0],
                &[0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                &[1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                &[0, 0, 1, 0, 1, 0, 0, 0, 1, 0],
                &[1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                &[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                &[0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
                &[0, 0, 0, 1, 1, 0, 1, 0, 1, 0],
                &[1, 0, 1, 0, 1, 0, 0, 1, 0, 0],
                &[0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                &[0, 1, 1, 1, 0, 1, 0, 0, 0, 0],
                &[0, 0, 1, 0, 1, 1, 0, 0, 0, 1],
                &[0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                &[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                &[1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
            ],
            4,
        )
    }

    #[test]
    fn discussion_case8() {
        test(
            &[
                &[
                    0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0,
                    0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0,
                ],
                &[
                    0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1,
                    1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1,
                ],
                &[
                    1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
                    1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1,
                ],
                &[
                    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1,
                    0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0,
                ],
                &[
                    1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1,
                    1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0,
                ],
                &[
                    0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,
                    1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1,
                ],
                &[
                    1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0,
                    1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
                ],
                &[
                    1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0,
                    1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1,
                ],
                &[
                    1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,
                    0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
                ],
                &[
                    1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1,
                    0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1,
                ],
                &[
                    0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1,
                    1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,
                ],
                &[
                    1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0,
                    1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1,
                ],
                &[
                    0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,
                    0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
                ],
                &[
                    1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0,
                    1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0,
                ],
                &[
                    0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0,
                    1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0,
                ],
                &[
                    0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1,
                    1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
                ],
                &[
                    0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                    0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1,
                ],
                &[
                    0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0,
                    1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,
                ],
                &[
                    0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,
                    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1,
                ],
                &[
                    0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0,
                    1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                ],
                &[
                    0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                    0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0,
                ],
                &[
                    0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1,
                    1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,
                ],
                &[
                    0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,
                    0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0,
                ],
                &[
                    1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,
                    0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
                ],
                &[
                    1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0,
                ],
                &[
                    1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1,
                    0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,
                ],
                &[
                    0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1,
                    1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1,
                ],
                &[
                    0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,
                    0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1,
                ],
                &[
                    1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
                    0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
                ],
                &[
                    1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1,
                    0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,
                ],
                &[
                    0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1,
                    1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0,
                ],
                &[
                    1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
                    0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0,
                ],
                &[
                    0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0,
                    0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1,
                ],
                &[
                    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1,
                    1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0,
                ],
                &[
                    1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,
                ],
                &[
                    0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,
                    1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1,
                ],
                &[
                    0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1,
                    1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0,
                ],
                &[
                    0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,
                    1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0,
                ],
                &[
                    1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                    1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1,
                ],
                &[
                    1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1,
                    0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0,
                ],
                &[
                    0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
                    0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1,
                ],
                &[
                    0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
                    0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,
                ],
                &[
                    0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,
                    1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0,
                ],
                &[
                    1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,
                    0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,
                ],
                &[
                    0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1,
                    0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,
                ],
                &[
                    1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1,
                    1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1,
                ],
                &[
                    1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,
                    1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0,
                ],
                &[
                    0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1,
                    0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,
                ],
                &[
                    0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1,
                    1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1,
                ],
                &[
                    1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0,
                    0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0,
                ],
            ],
            2,
        )
    }
}
