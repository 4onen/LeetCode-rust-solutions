// https://leetcode.com/problems/maximum-number-of-k-divisible-components/

pub struct Solution;

// Initial manual-stack recursive DFS sol'n
impl Solution {
    pub fn max_k_divisible_components(
        n: i32,
        edges: Vec<Vec<i32>>,
        values: Vec<i32>,
        k: i32,
    ) -> i32 {
        type Idx = u16;
        type Sum = i64;
        assert!(n >= 1);
        let n = n as Idx;
        let mut adjacency_map: Vec<Vec<Idx>> = vec![vec![]; n as usize];
        for edge in edges {
            adjacency_map[edge[0] as usize].push(edge[1] as Idx);
            adjacency_map[edge[1] as usize].push(edge[0] as Idx);
        }
        let mut components = 0;
        let mut seen: std::collections::HashSet<Idx> =
            std::collections::HashSet::with_capacity(n as usize);
        let mut idx_stacked: Vec<Idx> = if n > 2 {
            // Many-node tree
            vec![(0..n)
                .into_iter()
                .max_by_key(|&i| adjacency_map[i as usize].len())
                .unwrap()]
        } else {
            // Two-node tree special case
            (0..n).collect()
        };
        let mut sum_stacked: Vec<Sum> = std::vec::Vec::new();
        loop {
            let Some(current_node): Option<Idx> = idx_stacked.pop() else {
                break;
            };
            let first_seen = seen.insert(current_node);
            let neighbors = &adjacency_map[current_node as usize];
            if neighbors.len() < 2 {
                // Leaf node
                let value = values[current_node as usize];
                if value % k == 0 {
                    // Component by itself
                    components += 1;
                } else {
                    // Not a component by itself
                    *sum_stacked.last_mut().unwrap() += value as i64;
                }
            } else {
                // Parent node of some children
                let Some(next_child) = neighbors.iter().copied().find(|i| !seen.contains(i)) else {
                    // No next-child to consider
                    let value = values[current_node as usize] as i64 + sum_stacked.pop().unwrap();
                    if value % k as i64 == 0 {
                        components += 1;
                    } else {
                        // Not a component by itself
                        *sum_stacked.last_mut().unwrap() += value;
                    }
                    continue;
                };
                idx_stacked.push(current_node);
                idx_stacked.push(next_child);
                if first_seen {
                    sum_stacked.push(0);
                }
            }
        }
        components
    }
}

// Naive Recursive dfs
// (As one might reasonably expect, the stack overflows on maximal exmaples.)
// (LeetCode accepts it, though.)
// impl Solution {
//     pub fn max_k_divisible_components(
//         n: i32,
//         edges: Vec<Vec<i32>>,
//         values: Vec<i32>,
//         k: i32,
//     ) -> i32 {
//         type Idx = u16;
//         assert!(n >= 1);
//         let n = n as Idx;
//         let mut adjacency_map: Vec<Vec<Idx>> = vec![vec![]; n as usize];
//         for edge in edges {
//             adjacency_map[edge[0] as usize].push(edge[1] as Idx);
//             adjacency_map[edge[1] as usize].push(edge[0] as Idx);
//         }
//         fn dfs(
//             current_node: Idx,
//             parent: Idx,
//             adjacency_map: &Vec<Vec<Idx>>,
//             values: &Vec<i32>,
//             k: i32,
//         ) -> (u16, i32) {
//             let value = values[current_node as usize];
//             if parent != 0 && adjacency_map[current_node as usize].len() < 2 {
//                 return if value % k == 0 {
//                     // Component by itself
//                     (1, 0)
//                 } else {
//                     // Not a component by itself
//                     (0, value)
//                 };
//             }
//             let mut components = 0;
//             let mut value = value;
//             for &neighbor in &adjacency_map[current_node as usize] {
//                 if neighbor != parent {
//                     let (child_components, child_value) =
//                         dfs(neighbor, current_node, adjacency_map, values, k);
//                     components += child_components;
//                     if value > k {
//                         value = (value + child_value) % k;
//                     } else {
//                         value = value + child_value;
//                     }
//                 }
//             }
//             value = value % k;
//             if value % k == 0 {
//                 (components + 1, 0)
//             } else {
//                 (components, value)
//             }
//         }
//         dfs(0, 0, &adjacency_map, &values, k).0 as i32
//     }
// }

#[cfg(test)]
mod tests {
    use super::*;

    fn test(edges: &[[u16; 2]], values: &[i32], k: i32, expected: i32) {
        let n = values.len() as u16;
        assert!(n >= 1);
        assert!(n <= 30_000);
        assert_eq!(edges.len(), (n - 1) as usize);
        for &[a, b] in edges {
            assert!(a < n);
            assert!(b < n);
        }
        for &val in values {
            assert!(val >= 0);
            assert!(val <= 1_000_000_000);
        }
        assert!(k >= 1);
        assert!(k <= 1_000_000_000);
        assert_eq!(values.iter().copied().fold(0, |acc, v| (acc + v) % k), 0);
        assert_eq!(
            Solution::max_k_divisible_components(
                n as i32,
                edges
                    .iter()
                    .map(|&[a, b]| vec![a as i32, b as i32])
                    .collect(),
                values.to_vec(),
                k,
            ),
            expected
        );
    }

    #[test]
    fn ex1() {
        test(&[[0, 2], [1, 2], [1, 3], [2, 4]], &[1, 8, 1, 4, 4], 6, 2)
    }

    #[test]
    fn ex2() {
        test(
            &[[0, 1], [0, 2], [1, 3], [1, 4], [2, 5], [2, 6]],
            &[3, 0, 6, 1, 5, 2, 1],
            3,
            3,
        )
    }

    #[test]
    fn myex1() {
        test(&[[0, 1], [0, 2]], &[4, 4, 4], 4, 3)
    }

    #[test]
    fn discussion_case1() {
        test(&[[2, 3], [1, 2], [0, 1]], &[100, 3, 5, 2], 10, 2)
    }

    #[test]
    fn discussion_case2() {
        test(
            &[[0, 1], [1, 2], [2, 3], [3, 4], [3, 5]],
            &[3, 8, 2, 2, 4, 5],
            8,
            1,
        )
    }

    #[test]
    fn discussion_case3() {
        // test case 492 / 736
        test(&[[2, 3], [2, 0], [2, 4], [3, 1]], &[3, 0, 3, 15, 3], 8, 2)
    }

    #[test]
    fn discussion_case4() {
        test(
            &[[0, 1], [0, 2], [1, 3], [1, 4], [1, 5], [1, 6]],
            &[3, 0, 6, 1, 5, 2, 1],
            3,
            3,
        )
    }

    #[test]
    fn discussion_case5() {
        test(&[], &[6], 6, 1)
    }

    #[test]
    fn discussion_case6() {
        test(&[[0, 1], [1, 2], [2, 3], [3, 4]], &[6; 5], 6, 5)
    }

    #[test]
    fn discussion_case7() {
        test(&[[0, 1], [1, 2], [2, 3], [3, 4]], &[1, 2, 3, 4, 4], 7, 1)
    }

    #[test]
    fn my_extreme_ex1() {
        let mut input_edges = [[0, 0]; 29_999];
        for i in 0..29_999 {
            input_edges[i as usize] = [i, i + 1]
        }
        let mut input_values = [0; 30_000];
        let k = 197;
        let mut rng_state = 42u32;
        let mut acc = 0;
        let mut result = 1;
        for i in 0..29_999 {
            rng_state ^= rng_state << 13;
            rng_state ^= rng_state >> 17;
            rng_state ^= rng_state << 5;
            let val = rng_state & (u32::MAX >> 3); // Mask off top bits so
                                                   // val remains below 10^9
            assert!(val <= 1_000_000_000);
            input_values[i] = val as i32;
            acc = (acc + val) % k;
            if acc == 0 {
                result += 1;
            }
        }
        input_values[29_999] = (k * (rng_state & 0xFF) - acc) as i32;
        test(&input_edges, &input_values, k as i32, result);
    }

    #[test]
    fn my_extreme_ex2() {
        const N: u16 = 30_000;
        let mut input_edges = [[0, 0]; (N - 1) as usize];
        for i in 0..N - 1 {
            input_edges[i as usize] = [i / 10 * 10, i + 1]
        }
        let mut input_values = [0; N as usize];
        let k = 197;
        let mut rng_state = 42u32;
        let mut acc = 0;
        for i in 0..29_999 {
            rng_state ^= rng_state << 13;
            rng_state ^= rng_state >> 17;
            rng_state ^= rng_state << 5;
            let val = rng_state & (u32::MAX >> 3); // Mask off top bits so
                                                   // val remains below 10^9
            assert!(val <= 1_000_000_000);
            input_values[i] = val as i32;
            acc = (acc + val) % k;
        }
        input_values[29_999] = (k * (rng_state & 0xFF) - acc) as i32;
        // Don't-crash test
        let result = Solution::max_k_divisible_components(
            N as i32,
            input_edges
                .into_iter()
                .map(|e| vec![e[0] as i32, e[1] as i32])
                .collect(),
            input_values.to_vec(),
            k as i32,
        );
        assert!(result >= 1);
    }

    #[test]
    fn discussion_case8() {
        test(
            &[
                [201, 414],
                [201, 314],
                [314, 14],
                [314, 376],
                [201, 364],
                [376, 48],
                [414, 100],
                [364, 50],
                [14, 251],
                [364, 291],
                [100, 110],
                [251, 412],
                [376, 62],
                [376, 232],
                [232, 101],
                [364, 396],
                [291, 74],
                [48, 141],
                [251, 344],
                [251, 219],
                [251, 338],
                [141, 366],
                [62, 9],
                [100, 114],
                [50, 402],
                [114, 354],
                [414, 332],
                [344, 12],
                [12, 16],
                [50, 280],
                [48, 162],
                [62, 319],
                [402, 339],
                [402, 160],
                [201, 119],
                [344, 302],
                [332, 317],
                [251, 236],
                [114, 161],
                [110, 174],
                [319, 274],
                [110, 271],
                [339, 188],
                [364, 131],
                [271, 254],
                [354, 130],
                [14, 175],
                [130, 55],
                [14, 75],
                [48, 24],
                [274, 340],
                [317, 69],
                [74, 268],
                [274, 98],
                [130, 240],
                [101, 411],
                [402, 387],
                [160, 32],
                [291, 242],
                [376, 132],
                [48, 25],
                [319, 191],
                [101, 371],
                [78, 170],
                [170, 166],
                [166, 29],
                [78, 307],
                [29, 398],
                [398, 409],
                [339, 307],
                [259, 382],
                [382, 352],
                [352, 145],
                [382, 392],
                [259, 365],
                [392, 330],
                [352, 214],
                [382, 164],
                [145, 327],
                [327, 105],
                [352, 208],
                [382, 216],
                [330, 37],
                [164, 39],
                [39, 290],
                [259, 0],
                [164, 295],
                [145, 220],
                [105, 318],
                [216, 83],
                [214, 30],
                [327, 47],
                [220, 380],
                [382, 260],
                [295, 397],
                [216, 102],
                [259, 284],
                [327, 249],
                [382, 53],
                [0, 120],
                [260, 378],
                [284, 386],
                [102, 185],
                [378, 408],
                [0, 333],
                [39, 375],
                [214, 350],
                [37, 72],
                [216, 142],
                [392, 288],
                [288, 368],
                [32, 216],
                [165, 239],
                [165, 379],
                [239, 218],
                [165, 179],
                [179, 413],
                [239, 231],
                [231, 118],
                [157, 138],
                [138, 345],
                [345, 111],
                [157, 27],
                [27, 204],
                [111, 331],
                [204, 159],
                [157, 49],
                [331, 225],
                [204, 370],
                [111, 270],
                [49, 177],
                [177, 265],
                [225, 196],
                [138, 245],
                [159, 328],
                [265, 363],
                [270, 304],
                [157, 178],
                [138, 306],
                [270, 289],
                [265, 311],
                [225, 195],
                [413, 345],
                [78, 159],
                [70, 22],
                [70, 322],
                [22, 67],
                [67, 63],
                [67, 262],
                [22, 356],
                [67, 389],
                [70, 13],
                [67, 377],
                [262, 77],
                [77, 272],
                [67, 3],
                [3, 335],
                [272, 229],
                [322, 180],
                [335, 388],
                [262, 353],
                [389, 385],
                [70, 133],
                [67, 52],
                [353, 321],
                [229, 31],
                [385, 54],
                [77, 182],
                [262, 168],
                [262, 206],
                [335, 202],
                [356, 222],
                [52, 79],
                [353, 8],
                [222, 390],
                [133, 399],
                [168, 192],
                [353, 99],
                [399, 233],
                [22, 209],
                [180, 28],
                [272, 135],
                [8, 61],
                [99, 144],
                [28, 403],
                [353, 128],
                [206, 241],
                [67, 33],
                [22, 283],
                [389, 124],
                [31, 215],
                [262, 103],
                [389, 19],
                [385, 38],
                [77, 92],
                [180, 186],
                [215, 391],
                [335, 235],
                [63, 15],
                [233, 315],
                [38, 312],
                [229, 172],
                [353, 343],
                [235, 18],
                [235, 40],
                [70, 237],
                [38, 146],
                [377, 189],
                [391, 125],
                [186, 107],
                [389, 278],
                [278, 6],
                [186, 359],
                [272, 197],
                [146, 243],
                [67, 224],
                [146, 109],
                [99, 292],
                [128, 17],
                [18, 43],
                [233, 277],
                [233, 190],
                [172, 11],
                [124, 86],
                [66, 56],
                [66, 324],
                [324, 234],
                [324, 252],
                [252, 329],
                [234, 334],
                [324, 154],
                [154, 44],
                [66, 383],
                [324, 293],
                [66, 210],
                [383, 367],
                [252, 313],
                [334, 205],
                [154, 406],
                [252, 266],
                [44, 89],
                [334, 82],
                [234, 91],
                [38, 252],
                [380, 262],
                [221, 23],
                [221, 173],
                [173, 348],
                [23, 286],
                [221, 88],
                [221, 346],
                [221, 296],
                [296, 267],
                [173, 213],
                [267, 347],
                [346, 308],
                [286, 126],
                [88, 316],
                [173, 207],
                [346, 244],
                [23, 147],
                [126, 106],
                [23, 200],
                [207, 417],
                [207, 163],
                [267, 309],
                [23, 404],
                [347, 96],
                [147, 193],
                [213, 355],
                [173, 194],
                [193, 68],
                [147, 104],
                [296, 276],
                [316, 253],
                [96, 10],
                [68, 299],
                [213, 46],
                [404, 263],
                [96, 294],
                [10, 203],
                [404, 167],
                [263, 394],
                [294, 217],
                [309, 415],
                [217, 41],
                [316, 198],
                [23, 281],
                [394, 228],
                [281, 57],
                [228, 273],
                [417, 358],
                [194, 117],
                [207, 279],
                [221, 416],
                [57, 140],
                [308, 264],
                [355, 374],
                [194, 108],
                [267, 246],
                [415, 112],
                [244, 258],
                [203, 51],
                [10, 227],
                [173, 116],
                [221, 226],
                [163, 360],
                [279, 84],
                [46, 121],
                [253, 336],
                [358, 36],
                [147, 181],
                [347, 127],
                [68, 211],
                [117, 35],
                [112, 155],
                [194, 357],
                [264, 238],
                [23, 269],
                [415, 257],
                [358, 153],
                [71, 401],
                [401, 351],
                [351, 285],
                [71, 94],
                [351, 405],
                [285, 65],
                [65, 298],
                [298, 373],
                [405, 149],
                [401, 341],
                [298, 282],
                [405, 184],
                [373, 81],
                [184, 26],
                [401, 400],
                [341, 342],
                [94, 148],
                [298, 113],
                [351, 275],
                [184, 223],
                [147, 275],
                [242, 221],
                [90, 310],
                [310, 85],
                [310, 123],
                [123, 137],
                [123, 95],
                [123, 87],
                [310, 4],
                [85, 212],
                [87, 369],
                [87, 395],
                [123, 255],
                [123, 297],
                [4, 21],
                [255, 156],
                [297, 152],
                [85, 337],
                [212, 143],
                [143, 361],
                [123, 2],
                [95, 303],
                [85, 287],
                [2, 362],
                [2, 349],
                [176, 85],
                [58, 256],
                [256, 323],
                [58, 1],
                [58, 136],
                [1, 326],
                [256, 320],
                [256, 151],
                [1, 372],
                [136, 7],
                [372, 381],
                [326, 187],
                [320, 150],
                [1, 247],
                [320, 407],
                [150, 410],
                [187, 171],
                [7, 73],
                [1, 169],
                [151, 393],
                [393, 305],
                [407, 261],
                [151, 80],
                [323, 248],
                [80, 301],
                [381, 76],
                [7, 34],
                [372, 60],
                [248, 325],
                [150, 300],
                [301, 5],
                [301, 199],
                [325, 134],
                [150, 158],
                [134, 384],
                [384, 230],
                [169, 250],
                [151, 183],
                [300, 129],
                [256, 139],
                [256, 45],
                [60, 93],
                [34, 64],
                [384, 42],
                [129, 97],
                [384, 115],
                [323, 59],
                [136, 122],
                [384, 20],
                [143, 169],
                [22, 64],
            ],
            &[
                28904682, 485825, 70130238, 1528795, 62893660, 1175830, 22982023, 16043582,
                21585404, 11436677, 59733, 3304439, 14829181, 10362, 6484564, 3987073, 154486,
                7579968, 671399, 7813300, 66911106, 10689529, 9107404, 4763284, 16354223, 2143715,
                882859, 28784988, 14895572, 83667414, 22591901, 6306499, 4029872, 5343401,
                32861802, 20147678, 29338839, 10125156, 9454786, 7807979, 39588337, 3515504,
                1769079, 8945441, 20097651, 17676013, 782170, 16817257, 2839168, 29984427, 3841448,
                9121820, 1258681, 5777009, 797580, 5610241, 1863527, 1715829, 1919911, 3217880,
                6609453, 386327, 46529, 195577, 6002892, 15065999, 163509902, 13435352, 3414733,
                5592125, 2102969, 31891555, 18191561, 4639601, 21388525, 35404492, 6806684, 515255,
                12076217, 6409249, 2659179, 7802712, 67199633, 23274128, 2018751, 13693751,
                5749238, 89046409, 88795734, 17638962, 3826537, 12563585, 1364130, 23085182,
                1468033, 73475512, 3243784, 35956428, 2263306, 3934517, 10721279, 28206835,
                14239839, 1760760, 6716896, 4633515, 16684707, 7622625, 7445923, 1337730, 4101808,
                6308587, 7136769, 9539911, 6564616, 14728988, 344654, 5797942, 79460142, 1417262,
                26538128, 20255010, 6535928, 3715480, 13913305, 6860500, 3261576, 6289188, 104821,
                6726850, 8690969, 13549027, 4983393, 247066, 14925172, 13361596, 20830998,
                13790604, 89901689, 21940688, 11677321, 17910234, 26532863, 31703874, 5443352,
                2409657, 1812614, 6860965, 867217, 49345073, 17754571, 13929345, 51972559,
                10459078, 18978552, 2333533, 10528942, 3640518, 837622, 1888928, 7417584, 6633711,
                2953804, 2225979, 3963076, 20819722, 120810344, 19110878, 6125908, 49162020,
                172562094, 10629377, 16028858, 7694779, 26378158, 13378902, 609109790, 982552,
                80118717, 81295055, 4936274, 6061685, 9831669, 1000914, 53735519, 31870819,
                1448073, 25102202, 9364789, 5563179, 17190623, 11959510, 2116984, 15752931,
                10211026, 7104758, 25205906, 3420309, 2436628, 12473805, 5778190, 18874533,
                4214723, 2951301, 5627505, 62041007, 13720965, 5289378, 10550075, 6576729,
                25036381, 583684, 25151449, 8719365, 27320716, 9786651, 2438958, 1919981, 24279402,
                16041036, 7241829, 70622, 24538362, 29375306, 4676814, 26565308, 7333583, 8016181,
                462499, 17083495, 12284830, 92266640, 9542612, 4913007, 8328020, 5382819, 10556036,
                1366157, 7415224, 139805917, 9184624, 2605106, 2686871, 476404, 1547128, 30779867,
                12970186, 1294193, 17492517, 24243181, 21301561, 2333691, 16920290, 1388600,
                15133933, 1650858, 5171193, 2149871, 5822559, 2957968, 4525307, 7587303, 489204,
                16360257, 1756549, 1952514, 21620545, 756111, 7906261, 148363, 10496042, 3375548,
                851501, 6786209, 198869, 62008055, 12052964, 4705137, 4483674, 714196, 1612031,
                28349090, 2786890, 1290079, 25253092, 78528455, 13270434, 15263532, 7008626,
                47096501, 18522194, 2183161, 652000, 10267138, 10399124, 70345356, 4978809,
                1650823, 8234858, 19231882, 3395510, 5322427, 8879170, 7491280, 105178227, 9003893,
                23109613, 83307287, 2761388, 3468077, 16511644, 20300707, 8390292, 30914104,
                30895180, 5014535, 2363558, 15460669, 6494634, 525100, 2104806, 22083841, 10776569,
                6473768, 9190919, 26347372, 6621229, 17353558, 24869497, 32314460, 10480964,
                17894737, 14472924, 5296369, 13821976, 5004108, 5211655, 8595802, 22292840,
                3445420, 8674793, 139981, 3627466, 19653176, 5336020, 9574288, 2662360, 3037974,
                14030602, 3000626, 7450289, 9814832, 9459180, 5703990, 15046256, 5038229, 10785937,
                1651129, 137783, 7515178, 1108276, 16776684, 15952297, 11423767, 33878750,
                18131090, 592719, 4068616, 3520065, 39401236, 320147, 779519, 6326879, 66859278,
                7844829, 9534481, 1523614, 24553, 12532067, 74237049, 5837641, 10346423, 3831174,
                47885057, 3860635, 7915214, 16983170, 23854207, 9072394, 17431015, 155377,
                37431247, 2564201, 5081169, 10162821, 22196464, 7784083, 11197527, 78304558,
                4307559, 43949192, 78152300, 1480822, 11652654, 6583083, 55034299, 24849465,
                10444938, 24358508, 58381876, 4250217, 2438482, 3718620, 96945863, 1750963,
                1493510, 4258403, 14398446,
            ],
            609109790,
            12,
        )
    }

    #[test]
    fn failing_case1() {
        test(&[[1, 0]], &[0, 0], 100000000, 2)
    }
}
