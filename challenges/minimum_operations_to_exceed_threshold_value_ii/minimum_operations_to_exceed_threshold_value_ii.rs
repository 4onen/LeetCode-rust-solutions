// https://leetcode.com/problems/minimum-operations-to-exceed-threshold-value-ii/

pub struct Solution;

// Initial sol'n
// impl Solution {
//     pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {
//         let nums: Vec<std::cmp::Reverse<i32>> = unsafe { std::mem::transmute(nums) };
//         let mut heap: std::collections::BinaryHeap<std::cmp::Reverse<i32>> = nums.into();
//         let mut ops = 0;
//         while heap.peek().unwrap().0 < k {
//             ops += 1;
//             let std::cmp::Reverse(x) = heap.pop().unwrap();
//             let std::cmp::Reverse(y) = heap.pop().unwrap();
//             let min = i32::min(x, y);
//             let max = i32::max(x, y);
//             heap.push(std::cmp::Reverse((min * 2).saturating_add(max)));
//         }
//         ops
//     }
// }

// Optimized loop, heap access behaviour
// impl Solution {
//     pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {
//         let nums: Vec<std::cmp::Reverse<i32>> = unsafe { std::mem::transmute(nums) };
//         let mut heap: std::collections::BinaryHeap<std::cmp::Reverse<i32>> = nums.into();
//         let mut ops = 0;
//         loop {
//             let Some(std::cmp::Reverse(x)) = heap.pop() else {
//                 break;
//             };
//             if x >= k {
//                 break;
//             }
//             ops += 1;
//             let Some(mut rev_y) = heap.peek_mut() else {
//                 break;
//             };
//             let min = i32::min(x, rev_y.0);
//             let max = i32::max(x, rev_y.0);
//             rev_y.0 = (2 * min).saturating_add(max);
//         }
//         ops
//     }
// }

// Save min/max ops
impl Solution {
    pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {
        let nums: Vec<std::cmp::Reverse<i32>> = unsafe { std::mem::transmute(nums) };
        let mut heap: std::collections::BinaryHeap<std::cmp::Reverse<i32>> = nums.into();
        let mut ops = 0;
        loop {
            let Some(std::cmp::Reverse(min)) = heap.pop() else {
                break;
            };
            if min >= k {
                break;
            }
            ops += 1;
            let Some(mut rev_y) = heap.peek_mut() else {
                break;
            };
            rev_y.0 = (2 * min).saturating_add(rev_y.0);
        }
        ops
    }
}

// Unwrap for speed (Nope, actually slower)
// impl Solution {
//     pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {
//         let nums: Vec<std::cmp::Reverse<i32>> = unsafe { std::mem::transmute(nums) };
//         let mut heap: std::collections::BinaryHeap<std::cmp::Reverse<i32>> = nums.into();
//         let mut ops = 0;
//         loop {
//             let std::cmp::Reverse(min) = heap.pop().unwrap();
//             if min >= k {
//                 break;
//             }
//             ops += 1;
//             let mut rev_y = heap.peek_mut().unwrap();
//             rev_y.0 = (2 * min).saturating_add(rev_y.0);
//         }
//         ops
//     }
// }

// Hyperopt (Not faster, slightly more mem use)
// impl Solution {
//     pub fn min_operations(nums: Vec<i32>, k: i32) -> i32 {
//         let nums: Vec<std::cmp::Reverse<i32>> = unsafe { std::mem::transmute(nums) };
//         let mut heap: std::collections::BinaryHeap<std::cmp::Reverse<i32>> = nums.into();
//         let mut ops = 0;
//         loop {
//             let Some(std::cmp::Reverse(min)) = heap.pop() else {
//                 break;
//             };
//             if min >= k {
//                 break;
//             }
//             ops += 1;
//             let Some(mut peek) = heap.peek_mut() else {
//                 break;
//             };
//             let y = &mut peek.0;
//             *y = (2 * min).saturating_add(*y);
//         }
//         ops
//     }
// }

#[cfg(test)]
mod tests {
    use super::*;

    fn test(nums: &[i32], k: i32, expected: i32) {
        assert!(nums.len() >= 2);
        assert!(nums.len() <= 200_000);
        for &num in nums {
            assert!(num >= 1);
            assert!(num <= 1_000_000_000);
        }
        assert!(k >= 1);
        assert!(k <= 1_000_000_000);
        assert_eq!(Solution::min_operations(nums.to_vec(), k as i32), expected);
    }

    #[test]
    fn ex1() {
        test(&[2, 11, 10, 1, 3], 10, 2)
    }

    #[test]
    fn ex2() {
        test(&[1, 1, 2, 4, 9], 20, 4)
    }

    #[test]
    fn discussion_case1() {
        test(&[999999999, 999999999, 999999999], 1000000000, 2)
    }

    #[test]
    fn discussion_case1_1() {
        test(&[999999999, 999999999, 999999999, 999999999], 1000000000, 2)
    }

    #[test]
    fn discussion_case1_2() {
        test(
            &[999999999, 999999999, 999999999, 999999999, 999999999],
            1000000000,
            3,
        )
    }

    #[test]
    fn discussion_case2() {
        test(&[80, 47], 81, 1)
    }

    #[test]
    fn discussion_case3() {
        test(&[9, 98, 52, 8], 2, 0)
    }

    #[test]
    fn discussion_case4() {
        test(&[62, 32, 62, 73, 58, 56, 68, 50], 74, 4);
        test(&[62, 62, 73, 58, 56, 68, 114], 74, 3);
        test(&[62, 62, 73, 140, 68, 114], 74, 2);
        test(&[186, 73, 140, 68, 114], 74, 1);
        test(&[186, 209, 140, 114], 74, 0);
    }

    #[test]
    fn discussion_case5() {
        test(&[69, 89, 57, 31, 84, 97, 50, 38, 91, 86], 91, 4);
        test(&[69, 89, 57, 84, 50, 86, 91, 97, 100], 91, 3);
        test(&[69, 89, 84, 86, 91, 97, 100, 157], 91, 2);
        test(&[89, 86, 91, 97, 100, 157, 222], 91, 1);
        test(&[261, 91, 97, 100, 157, 222], 91, 0);
    }

    #[test]
    fn discussion_case6() {
        test(
            &[
                1000000000, 999999999, 1000000000, 999999999, 1000000000, 999999999,
            ],
            1000000000,
            2,
        );
    }

    #[test]
    fn discussion_case7() {
        test(
            &[
                951924504, 207354249, 603003160, 847378762, 601075945, 453971049, 479857220,
                885909692, 85271028, 503406075, 172108231, 194876304, 818937489, 746206822,
                166989136, 413209238, 324105426, 33682960, 76436235, 510066684, 945531005,
                72416013, 782778570, 138397007, 220484472, 95996601, 923123657, 283319301,
                521817856, 100266384, 67876748, 345239983, 932448197, 725949169, 783560727,
                232296872, 602860134, 209391269, 919183507, 802861347, 154788406, 416601119,
                891567696, 192525998, 111634409, 794935176, 664230849, 97093586, 508898728,
                40895788, 374379469, 921803998, 111395007, 922078442, 390441353, 510912904,
                308103546, 126283644, 305928842, 900252904, 976425643, 104859307, 749082196,
                38982759, 234650596, 175033891, 762436898, 462052249, 197509125, 356411343,
                506270756, 374107212, 409180771, 659387894, 363666312, 341758672, 959892688,
                542461121, 490134896, 962143691, 903679222, 25094522, 258514850, 702977816,
                457213257, 32147239, 986830643,
            ],
            746427997,
            41,
        )
    }

    #[test]
    fn discussion_case8() {
        test(
            &[
                838143973, 477351988, 121052388, 770379303, 105782152, 708118500, 882588219,
                230253017, 560587152, 397812337, 643659612, 601669668, 771566414, 962841450,
                810570350, 544112871, 799440717, 329394454, 787479395, 205804609, 629495304,
                899596311, 144367425, 304673518, 393268041, 202097336, 819086349, 884429174,
                270160705, 527867855, 521668021, 343471570, 537647818, 866769125, 217349099,
                935243686, 321440158, 32216125, 43831964, 812794341, 860502677, 338072008,
                260037766, 470798181, 678378133, 290630090, 584827892, 519305975, 117091652,
                966531836, 777810877, 863527565, 744838858, 612993326, 884537124, 611989640,
                186971728, 812479399, 27920770, 69659259, 646195084, 567861321, 312323780,
                513124936, 630784171, 293419536, 627356157, 588890365, 792166297, 373660002,
                752459117, 121752076, 512645203, 427751912, 923398172, 958763879, 642285281,
                732147783, 342580005, 802416393, 859828446, 396259566, 745686562, 907101150,
                124786437, 254985881, 458012611, 454198810, 865645378, 72261777, 3339254,
                894916237, 827283202, 185860947, 564513716, 451469180, 481172251, 940823958,
                662251478, 369330609, 476476247, 115917861, 596510797, 429902540, 751654265,
                627684499, 941241480, 610628209, 433854410, 514496162, 657924257, 838984533,
                553776785, 225969380, 669327335, 639117071, 612930507, 591150850, 411172174,
                800316506, 266336676, 767664376, 31254906, 173329275, 358726123, 592825304,
                448546934, 275720101, 30177210, 769620767, 864479734, 283392822, 879300242,
                235940235, 608769270, 982551119, 620390032, 582868324, 14726321, 360687612,
                71303863, 504605842, 871650043, 613716893, 484420553, 141824191, 564320933,
                200843471, 345143910, 535528375, 267523645, 346943613, 842114257, 424148479,
                893589388, 125658604, 371186577, 468562893, 831874702, 710509781, 951038412,
                889177517, 34969476, 7258324, 965577519, 127797070, 44378086, 401755305, 23958348,
                400015808, 875767510, 191622840, 109157194, 722760747, 976248009, 326421444,
                259429712, 209384622, 399451397, 653090819, 841042570, 422223269, 901817618,
                346948049, 967683425, 79306050, 918269741, 269903354, 127828512, 616646553,
                554927062, 157947774, 904549748, 397615710, 412432239, 641949694, 418992730,
                973228086, 585479463, 168954795, 631981615, 596526363, 46510840, 606856086,
                366953368, 734974020, 887130397, 911144493, 775559317, 910089491, 99582910,
                34681563, 193682744, 141156831, 322744672, 90181678, 201205057, 721831925,
                792039893, 382505946, 97407214, 987028349, 199214129, 752246459, 257213558,
                888624920, 564378347, 410320286, 362365058, 101132947, 778678974, 253085142,
                636069368, 504019304, 379246801, 432210174, 611006844, 449351329, 892064186,
                905177305, 850690744, 933831916, 687731658, 512209544, 487402878, 555033842,
                675881692, 973050398, 422728306, 955637497, 732640511, 987275630, 757433951,
                398806171, 720556133, 77777088, 992220908, 748859635, 417131994, 951133756,
                163816076, 541375981, 488789871, 27211993, 776158360, 85819118, 898740458,
                229098485, 946283187, 280964349, 588613947, 264325760, 847644280, 487825288,
                405984796, 158495132, 160961407, 952396914, 312818839, 188181681, 199694136,
                346946185, 70795267, 602596738, 937018319, 895057582, 485169492, 548487471,
                543134593, 398756610, 338576755, 592745426, 120404937, 988235245, 696426820,
                668038250, 299187356, 147609120, 992646018, 859576688, 769732440, 747833460,
                633298777, 831355981, 148330965, 467701132, 716439768, 329923263, 922457668,
                56110938, 33937332, 22573675, 408232760, 82562331, 943942194, 837201952, 403812948,
                594795710, 890139150, 401895702, 197714204, 760971789, 967043301, 881605970,
                655338090, 607640293, 396474631, 220865201, 639775739, 174723826, 209687809,
                684865361, 154906919, 273499122, 820899136, 551835929, 676391894, 99576678,
                107983427, 392033660, 186094091, 365613290, 979951583, 202582255, 610361428,
                628935429, 77838149, 811220163, 698936707, 371851559, 137982345, 392674127,
                238254532, 892561428, 781571698, 620059865, 204626266, 423089632, 710968282,
                868867157, 147156557, 413334751, 139163187, 440144184, 787385216, 708541681,
                628140702, 933745732, 298163879, 647754575, 296861028, 436163619, 794508763,
                372672993, 789079041, 720056081, 335237075, 542310587, 175885844, 228222839,
                826353730, 477771264, 714927901, 308060681, 597607222, 47056906, 139355133,
                480382533, 672841906, 55052527, 739481287, 576366495, 927222119, 347538510,
                123365929, 569239269,
            ],
            999999998,
            233,
        )
    }
}
