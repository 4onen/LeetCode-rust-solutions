// https://leetcode.com/problems/maximum-candies-allocated-to-k-children/

pub struct Solution;

// Incorrect first sol'n (Search space missed max pile size)
// impl Solution {
//     pub fn maximum_candies(candies: Vec<i32>, k: i64) -> i32 {
//         const fn check(candies: &[i32], k: i64, n_candy: i32) -> bool {
//             let mut i = 0;
//             let mut count = 0i64;
//             while i < candies.len() {
//                 let current_pile = candies[i];
//                 count += (current_pile / n_candy) as i64;
//                 if count >= k {
//                     return true;
//                 }
//                 i += 1;
//             }
//             false
//         }
//         let mut base = 0;
//         let mut size = candies.iter().copied().max().unwrap() as i32;
//         while size > 1 {
//             let half = size / 2;
//             let mid = base + half;
//             base = if check(&candies, k, mid) { mid } else { base };
//             size -= half;
//         }
//         if base == 0 {
//             return 0;
//         }
//         if check(&candies, k, base) {
//             base
//         } else {
//             base - 1
//         }
//     }
// }

// Initial sol'n
impl Solution {
    pub fn maximum_candies(candies: Vec<i32>, k: i64) -> i32 {
        const fn check(candies: &[i32], k: i64, n_candy: i32) -> bool {
            if n_candy == 0 {
                return true;
            }
            let mut i = 0;
            let mut count = 0i64;
            while i < candies.len() {
                let current_pile = candies[i];
                count += (current_pile / n_candy) as i64;
                if count >= k {
                    return true;
                }
                i += 1;
            }
            false
        }
        let mut base = 0;
        let mut size = candies.iter().copied().max().unwrap() + 1;
        while size > 1 {
            let half = size / 2;
            let mid = base + half;
            base = if check(&candies, k, mid) { mid } else { base };
            size -= half;
        }
        base
    }
}

// Optimization: Subtract from k to count, don't check for div-by-zero (Wound up slower)
// impl Solution {
//     pub fn maximum_candies(candies: Vec<i32>, k: i64) -> i32 {
//         const fn check(candies: &[i32], mut k: i64, n_candy: i32) -> bool {
//             let mut i = 0;
//             while i < candies.len() {
//                 let current_pile = candies[i];
//                 k -= (current_pile / n_candy) as i64;
//                 if k <= 0 {
//                     return true;
//                 }
//                 i += 1;
//             }
//             false
//         }
//         let mut base = 0;
//         let mut size = candies.iter().copied().max().unwrap() + 1;
//         while size > 1 {
//             let half = size / 2;
//             let mid = base + half;
//             base = if check(&candies, k, mid) { mid } else { base };
//             size -= half;
//         }
//         base
//     }
// }

#[cfg(test)]
mod tests {
    use super::*;

    fn test(candies: &[u32], k: u64, expected: i32) {
        assert!(candies.len() >= 1);
        assert!(candies.len() <= 100_000);
        for &c in candies {
            assert!(c >= 1);
            assert!(c <= 10_000_000);
        }
        assert!(k >= 1);
        assert!(k <= 1_000_000_000_000);
        assert_eq!(
            Solution::maximum_candies(candies.iter().map(|&x| x as i32).collect(), k as i64),
            expected
        );
    }

    #[test]
    fn ex1() {
        test(&[5, 8, 6], 3, 5)
    }

    #[test]
    fn ex2() {
        test(&[2, 5], 11, 0)
    }

    #[test]
    fn discussion_case1() {
        test(
            &[
                1246, 1308, 899, 1113, 555, 1013, 1345, 669, 1091, 1011, 513, 956, 916, 1019, 649,
                732, 1083, 792, 1330, 1102, 766, 1313, 639, 1110, 1393, 1452, 756, 1161, 605, 1207,
                1500, 1101, 636, 872, 1414, 866, 575, 659, 1241, 857, 1081, 623, 725, 1334, 732,
                1190, 1362, 1070, 595, 1425, 1172, 813, 674, 1233, 1135, 1167, 836, 747, 1280, 659,
                839, 1075, 888, 541, 509, 1217, 906, 808, 707, 1136, 1122, 1090, 510, 517, 1290,
                936, 647, 654, 1024, 776, 507, 1142, 887, 1209, 1085, 1267, 616, 559, 1396, 755,
                1316, 1367, 1266, 949, 1379, 565, 1320, 1364, 506, 1041, 1497, 1017, 1296, 1347,
                853, 896, 1448, 833, 1010, 949, 762, 502, 572, 1219, 1261, 1048, 852, 1361, 655,
                536, 551, 882, 1315, 1116, 849, 708, 625, 1488, 1094, 1273, 1475, 574, 998, 886,
                542, 1366, 1233, 1090, 1478, 932, 1178, 643, 554, 766, 1315, 836, 1037, 726, 1388,
                1051, 1366, 1417, 1327, 608, 1124, 884, 1462, 1119, 1491, 1256, 681, 547, 1163,
                954, 1153, 962, 1352, 709, 1476, 527, 840, 639, 992, 506, 530, 939, 1316, 986,
                1072, 652, 1106, 640, 1467, 1138, 1245, 845, 1442, 750, 815, 1435, 803, 616, 1279,
                665, 1367, 1141, 715, 1079, 519, 948, 1180, 1334, 1469, 1091, 1277, 582, 768, 715,
                528, 1197, 1144, 623, 709, 506, 1500, 623, 1074, 581, 934, 828, 1164, 1241, 1471,
                969, 1084, 1201, 1279, 1269, 829, 1351, 791, 1166, 838, 1339, 911, 1330, 579, 1469,
                973, 614, 580, 703, 1037, 1179, 1241, 1273, 939, 741, 853, 861, 927, 602, 509, 647,
                768, 857, 952, 744, 839, 1196, 1330, 588, 517, 581, 727, 1011, 1188, 939, 758,
                1067, 1025, 717, 892, 1474, 1473, 1312, 792, 1438, 684, 1481, 944, 598, 1304, 915,
                889, 1311, 1220, 538, 1406, 1455, 1016, 1349, 1432, 647, 675, 1267, 1212, 828, 648,
                542, 932, 1469, 926, 1108, 1414, 1244, 1101, 1285, 1252, 1158, 757, 1117, 701, 518,
                1145, 1337, 779, 653, 927, 1010, 751, 1109, 681, 1310, 1128, 1414, 888, 1447, 883,
                1352, 719, 1305, 1004, 1330, 990, 868, 746, 908, 1243, 1003, 861, 708, 1427, 1492,
                874, 705, 1270, 1399, 628, 507, 856, 1273, 1194, 613, 1048, 762, 1243, 598, 1448,
                1147, 1322, 1256, 617, 510, 571, 1062, 1215, 696, 1405, 1310, 1226, 591, 822, 546,
                1464, 1444, 1276, 589, 1329, 1095, 562, 754, 1147, 1159, 1184, 1176, 831, 1075,
                1194, 901, 531, 891, 551, 1054, 1406, 583, 1393, 798, 952, 828, 1348, 995, 1152,
                1462, 1035, 1477, 1036, 534, 1198, 612, 1008, 970, 997, 835, 960, 1106, 890, 1479,
                1021, 812, 675, 1115, 929, 1212, 1359, 1380, 958, 1387, 1477, 1006, 608, 556, 1136,
                1463, 759, 1316, 1182, 1313, 1402, 879, 964, 1089, 1392, 1045, 1026, 1098, 868,
                637, 1148, 1083, 1084, 1100, 1093, 1022, 1344, 1316, 895, 1192, 516, 512, 795,
                1308, 1187, 1049, 510, 1405, 1199, 851, 928, 530, 736, 1481, 933, 1004, 978, 1029,
                781, 939, 1399, 833, 1219, 552, 1165, 1021, 924, 1352, 704, 841, 868, 614, 644,
                790, 542, 599, 803, 619, 1247, 1193, 1395, 1057, 968, 1429, 1094, 1284, 1317, 724,
                868, 1490, 891, 1187, 774, 1192, 980, 724, 503, 1044, 735, 1216, 1281, 1480, 732,
                1032, 1145, 1183, 1241, 1470, 1229, 638, 1219, 1347, 1241, 548, 806, 1363, 1432,
                1049, 944, 544, 919, 774, 1245, 1188, 1328, 998, 1382, 626, 1128, 828, 949, 1385,
                1174, 1247, 742, 1386, 1375, 1413, 1125, 648, 1265, 676, 741, 1385, 855, 844, 1428,
                1391, 881, 665, 627, 1113, 732, 782, 510, 797, 770, 927, 1254, 533, 742, 573, 1130,
                1265, 1090, 1198, 806, 696, 1295, 583, 690, 1422, 742, 951, 1139, 1321, 1408, 910,
                918, 1248, 1317, 625, 1316, 723, 534, 1171, 880, 655, 678, 1460, 1241, 1062, 1209,
                1100, 1383, 950, 1463, 1144, 1436, 1227, 706, 742, 1341, 1232, 1497, 757, 1139,
                1456, 966, 1342, 1302, 716, 947, 534, 1194, 888, 1259, 752, 647, 561, 986, 870,
                704, 654, 978, 676, 680, 504, 802, 928, 978, 1133, 703, 843, 858, 758, 533, 739,
                1150, 1170, 839, 961, 1023, 1319, 742, 834, 1248, 594, 941, 884, 1344, 978, 1457,
                720, 1411, 582, 1472, 1214, 700, 1094, 825, 1273, 1233, 1017, 697, 1210, 1055,
                1478, 999, 601, 813, 1428, 1297, 578, 696, 577, 1148, 1082, 1418, 905, 779, 506,
                830, 753, 825, 1076, 1168, 523, 1112, 1243, 652, 1319, 1498, 606, 1129, 1231, 901,
                1164, 935, 1327, 1311, 792, 748, 1104, 616, 1424, 768, 973, 1224, 1118, 562, 1182,
                1449, 1259, 1220, 1091, 1055, 1070, 1019, 1287, 1213, 737, 673, 721, 731, 850, 943,
                1192, 1492, 982, 1164, 1427, 566, 1220, 544, 1288, 954, 949, 920, 611, 598, 1008,
                745, 1246, 1125, 1442, 548, 1267, 726, 1350, 761, 835, 1275, 741, 1495, 740, 989,
                1243, 588, 850, 564, 1063, 1075, 1260, 657, 596, 1402, 744, 1366, 1422, 905, 999,
                1292, 1074, 922, 958, 537, 505, 867, 1184, 603, 766, 1147, 1201, 1073, 1406, 1096,
                774, 586, 1301, 1481, 1254, 613, 1424, 1307, 1281, 690, 1322, 968, 1012, 711, 748,
                1437, 1343, 1370, 820, 1155, 700, 1278, 1491, 1155, 630, 1275, 916, 719, 974, 1122,
                970, 885, 1231, 1227, 815, 647, 1086, 1290, 753, 812, 1172, 1126, 1108, 860, 974,
                1395, 540, 920, 551, 837, 962, 908, 782, 735, 1227, 1322, 625, 1141, 1280, 1132,
                986, 771, 1241, 892, 722, 831, 958, 1335, 697, 516, 816, 1084, 927, 1466, 1273,
                1191, 940, 757, 1245, 1256, 533, 866, 971, 615, 740, 779, 1003, 1261, 1218, 727,
                569, 1413, 945, 1347, 1355, 1274, 1013, 739, 1404, 1234, 1126, 913, 1016, 862, 675,
                979, 850, 631, 739, 574, 569, 1145, 506, 646, 1257, 1477, 635, 1269, 1321, 1127,
                769, 1302, 1097, 1492, 1300, 733, 1283, 559, 1055, 933, 776, 1012, 638, 685, 1255,
                1446, 705, 1288, 929, 876, 776, 701, 987, 885, 1406, 1366, 1343, 944, 735, 802,
                1176, 603, 686, 674, 1019, 749, 1065, 1458, 1404, 910, 1446, 619, 1015, 1121, 736,
                979, 965, 1359, 757, 948, 718, 1224, 1179, 1119, 714, 1263, 1374, 1359, 1154, 1468,
                1162, 555, 1426, 921, 1119, 1284, 784, 991, 559, 961, 1421, 610, 979, 1158, 1377,
            ],
            1559,
            487,
        )
    }

    #[test]
    fn failing_case1() {
        test(&[9, 10, 1, 2, 10, 9, 9, 10, 2, 2], 3, 10)
    }

    #[test]
    fn failing_case1_1() {
        test(&[9, 10, 1, 2, 10, 9, 9, 2, 2], 3, 9)
    }

    #[test]
    fn failing_case1_2() {
        test(&[9, 10, 10, 9, 9], 3, 9)
    }

    #[test]
    fn failing_case1_3() {
        test(&[10, 10, 10], 3, 10)
    }
}
