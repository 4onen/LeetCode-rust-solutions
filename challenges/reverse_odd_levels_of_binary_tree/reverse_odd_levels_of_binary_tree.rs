// https://leetcode.com/problems/reverse-odd-levels-of-binary-tree/

use utils::TreeNode;

pub struct Solution;

use std::cell::RefCell;
use std::rc::Rc;

// Initial sol'n (Traverse each level, reverse, put back)
// impl Solution {
//     pub fn reverse_odd_levels(
//         mut root: Option<Rc<RefCell<TreeNode>>>,
//     ) -> Option<Rc<RefCell<TreeNode>>> {
//         type Levels = [Vec<i32>; 7];
//         let mut levels: Levels = Default::default();
//         fn read_rec(
//             depth: u8,
//             rights: u32,
//             levels: &mut Levels,
//             node: &Option<Rc<RefCell<TreeNode>>>,
//         ) {
//             let Some(node) = node else {
//                 return;
//             };
//             let contents = RefCell::borrow(node);
//             if depth % 2 == 1 {
//                 levels[(depth / 2) as usize].resize(1 << depth, -1);
//                 levels[(depth / 2) as usize][rights as usize] = contents.val;
//             }
//             read_rec(depth + 1, rights * 2, levels, &contents.left);
//             read_rec(depth + 1, rights * 2 + 1, levels, &contents.right);
//         }
//         read_rec(0, 0, &mut levels, &root);
//         for level in &mut levels {
//             level.reverse();
//         }
//         fn write_rec(
//             depth: u8,
//             rights: u32,
//             levels: &Levels,
//             node: &mut Option<Rc<RefCell<TreeNode>>>,
//         ) {
//             let Some(node) = node else {
//                 return;
//             };
//             let mut contents = node.borrow_mut();
//             if depth % 2 == 1 {
//                 contents.val = levels[(depth / 2) as usize][rights as usize];
//             }
//             write_rec(depth + 1, rights * 2, levels, &mut contents.left);
//             write_rec(depth + 1, rights * 2 + 1, levels, &mut contents.right);
//         }
//         write_rec(0, 0, &levels, &mut root);
//         root
//     }
// }

// Cap write iter depth at last level that matters (4ms faster)
// impl Solution {
//     pub fn reverse_odd_levels(
//         mut root: Option<Rc<RefCell<TreeNode>>>,
//     ) -> Option<Rc<RefCell<TreeNode>>> {
//         const LEVELS: u8 = 7;
//         type Levels = [Vec<i32>; LEVELS as usize];
//         let mut levels: Levels = Default::default();
//         fn read_rec(
//             depth: u8,
//             rights: u32,
//             levels: &mut Levels,
//             node: &Option<Rc<RefCell<TreeNode>>>,
//         ) {
//             let Some(node) = node else {
//                 return;
//             };
//             let contents = RefCell::borrow(node);
//             if depth % 2 == 1 {
//                 levels[(depth / 2) as usize].resize(1 << depth, -1);
//                 levels[(depth / 2) as usize][rights as usize] = contents.val;
//             }
//             read_rec(depth + 1, rights * 2, levels, &contents.left);
//             read_rec(depth + 1, rights * 2 + 1, levels, &contents.right);
//         }
//         read_rec(0, 0, &mut levels, &root);
//         for level in &mut levels {
//             level.reverse();
//         }
//         let end_depth = {
//             let mut top_level = 0u8;
//             while top_level < levels.len() as u8 && levels[top_level as usize].len() > 0 { top_level += 1; }
//             top_level*2+1
//         };
//         fn write_rec(
//             depth: u8,
//             end_depth: u8,
//             rights: u32,
//             levels: &Levels,
//             node: &mut Option<Rc<RefCell<TreeNode>>>,
//         ) {
//             let Some(node) = node else {
//                 return;
//             };
//             let mut contents = node.borrow_mut();
//             if depth % 2 == 1 {
//                 contents.val = levels[(depth / 2) as usize][rights as usize];
//             }
//             if depth < end_depth {
//                 write_rec(depth + 1, end_depth, rights * 2, levels, &mut contents.left);
//                 write_rec(depth + 1, end_depth, rights * 2 + 1, levels, &mut contents.right);
//             }
//         }
//         write_rec(0, end_depth, 0, &levels, &mut root);
//         root
//     }
// }

impl Solution {
    pub fn reverse_odd_levels(
        root: Option<Rc<RefCell<TreeNode>>>,
    ) -> Option<Rc<RefCell<TreeNode>>> {
        let mut nodes = vec![root.clone().unwrap()];
        let mut next_nodes = std::vec::Vec::new();
        let mut level = 0;
        while nodes.len() > 0 {
            if level % 2 != 0 {
                for i in 0..nodes.len() / 2 {
                    std::mem::swap(
                        &mut nodes[i].borrow_mut().val,
                        &mut nodes[nodes.len() - 1 - i].borrow_mut().val,
                    );
                }
            }
            if nodes[0].borrow().left.is_some() {
                next_nodes.reserve(2 * nodes.len());
                for node in nodes.drain(..) {
                    let borrow = node.borrow();
                    next_nodes.push(borrow.left.clone().unwrap());
                    next_nodes.push(borrow.right.clone().unwrap());
                }
            }
            std::mem::swap(&mut nodes, &mut next_nodes);
            level += 1;
        }
        root
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn test(root: &[i32], expected: &[i32]) {
        assert_eq!(root.len(), expected.len());
        assert!(root.len() >= 1);
        assert!(root.len() <= 16384); // 2^14
        assert!((root.len() + 1).is_power_of_two());
        for &val in root {
            // Kinda irrelevant but checking anyway
            assert!(val >= 0);
            assert!(val <= 100_000);
        }
        let tree = TreeNode::from_perfect_slice(root);
        assert_eq!(
            std::rc::Rc::into_inner(tree.expect("Utils lib error: No tree created"))
                .expect("Utils lib error: Memory leak?")
                .into_inner(),
            root
        );
        let tree = TreeNode::from_perfect_slice(root);
        let result =
            std::rc::Rc::into_inner(Solution::reverse_odd_levels(tree).expect("No tree returned."))
                .expect("Rc could not be converted into its inner value; solution has memory leak?")
                .into_inner();
        assert_eq!(result, expected);
    }

    #[test]
    fn ex1() {
        test(&[2, 3, 5, 8, 13, 21, 34], &[2, 5, 3, 8, 13, 21, 34])
    }

    #[test]
    fn ex2() {
        test(&[7, 13, 11], &[7, 11, 13])
    }

    #[test]
    fn ex3() {
        test(
            &[0, 1, 2, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2],
            &[0, 2, 1, 0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1],
        )
    }

    #[test]
    fn ex3_1() {
        test(
            &[
                0, 1, 2, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0,
            ],
            &[
                0, 2, 1, 0, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0,
            ],
        )
    }

    #[test]
    fn discussion_case1() {
        test(
            &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
            &[1, 3, 2, 4, 5, 6, 7, 15, 14, 13, 12, 11, 10, 9, 8],
        )
    }

    #[test]
    fn discussion_case2() {
        test(
            &[
                7565, 76756, 28443, 35138, 21291, 12853, 21020, 73552, 35298, 52318, 77864, 93774,
                25534, 65860, 78606,
            ],
            &[
                7565, 28443, 76756, 35138, 21291, 12853, 21020, 78606, 65860, 25534, 93774, 77864,
                52318, 35298, 73552,
            ],
        )
    }

    #[test]
    fn discussion_case3() {
        test(
            &[
                42484, 80983, 38385, 17344, 6417, 13115, 57859, 44870, 55869, 2189, 80845, 29513,
                31573, 34058, 94818, 40850, 35305, 73883, 84282, 12276, 89089, 96144, 22474, 11722,
                59982, 76044, 82160, 87763, 93217, 69976, 56576,
            ],
            &[
                42484, 38385, 80983, 17344, 6417, 13115, 57859, 94818, 34058, 31573, 29513, 80845,
                2189, 55869, 44870, 40850, 35305, 73883, 84282, 12276, 89089, 96144, 22474, 11722,
                59982, 76044, 82160, 87763, 93217, 69976, 56576,
            ],
        )
    }

    #[test]
    fn discussion_case4() {
        test(
            &[
                64929, 21447, 85016, 22860, 40169, 97584, 67090, 78235, 1517, 25348, 81659, 64559,
                38791, 67376, 59996, 63863, 88666, 96250, 14503, 18573, 1562, 45531, 11441, 56299,
                37798, 40658, 96871, 22764, 18658, 40578, 44004, 58130, 9957, 92215, 68411, 77708,
                13480, 654, 30408, 78086, 44042, 1203, 76837, 43155, 99571, 32201, 54106, 98283,
                91808, 56791, 86927, 68098, 44275, 67528, 60750, 35862, 11106, 36817, 37647, 1263,
                45494, 41828, 70678, 73827, 50222, 67238, 76103, 66538, 81545, 7797, 54705, 41372,
                24827, 67736, 39102, 55153, 59403, 73152, 88380, 99482, 53135, 14041, 88280, 78610,
                50410, 67898, 74695, 94218, 81874, 60, 60112, 2217, 74256, 85107, 71951, 18411,
                92537, 37844, 95320, 48477, 88093, 48878, 6464, 63116, 25088, 69018, 48999, 87004,
                15164, 19941, 66363, 80317, 48535, 57509, 56975, 22160, 46471, 1908, 62619, 47457,
                60972, 92184, 67669, 17409, 23790, 93792, 99656, 56202, 83322, 54092, 90369, 40371,
                86629, 18276, 21750, 82305, 80846, 94382, 69349, 73558, 19162, 46824, 60385, 56018,
                34904, 60094, 69424, 21664, 77438, 78779, 95979, 77008, 12675, 89043, 6297, 66634,
                51337, 58174, 9459, 21180, 28044, 97974, 65423, 27492, 36515, 91117, 65605, 39992,
                15866, 9716, 46477, 33033, 49672, 6102, 92244, 34452, 66168, 85051, 98759, 52931,
                99630, 60496, 3447, 90980, 96253, 3041, 5940, 80814, 62003, 40368, 87660, 59176,
                60607, 50465, 44344, 39985, 21738, 48266, 76461, 60078, 70294, 36376, 30052, 33445,
                70771, 86583, 66090, 8962, 65041, 36628, 3920, 82377, 72109, 51069, 64166, 25122,
                80884, 35846, 5795, 12916, 99686, 76773, 90651, 74517, 27425, 29821, 97564, 34404,
                91303, 90208, 36508, 33643, 40217, 73395, 52445, 80718, 99208, 30976, 53324, 70218,
                84290, 48829, 22312, 3968, 57504, 44684, 7565, 82102, 1685, 5314, 73018, 82908,
                76202, 72411, 94892,
            ],
            &[
                64929, 85016, 21447, 22860, 40169, 97584, 67090, 59996, 67376, 38791, 64559, 81659,
                25348, 1517, 78235, 63863, 88666, 96250, 14503, 18573, 1562, 45531, 11441, 56299,
                37798, 40658, 96871, 22764, 18658, 40578, 44004, 70678, 41828, 45494, 1263, 37647,
                36817, 11106, 35862, 60750, 67528, 44275, 68098, 86927, 56791, 91808, 98283, 54106,
                32201, 99571, 43155, 76837, 1203, 44042, 78086, 30408, 654, 13480, 77708, 68411,
                92215, 9957, 58130, 73827, 50222, 67238, 76103, 66538, 81545, 7797, 54705, 41372,
                24827, 67736, 39102, 55153, 59403, 73152, 88380, 99482, 53135, 14041, 88280, 78610,
                50410, 67898, 74695, 94218, 81874, 60, 60112, 2217, 74256, 85107, 71951, 18411,
                92537, 37844, 95320, 48477, 88093, 48878, 6464, 63116, 25088, 69018, 48999, 87004,
                15164, 19941, 66363, 80317, 48535, 57509, 56975, 22160, 46471, 1908, 62619, 47457,
                60972, 92184, 67669, 17409, 23790, 93792, 99656, 94892, 72411, 76202, 82908, 73018,
                5314, 1685, 82102, 7565, 44684, 57504, 3968, 22312, 48829, 84290, 70218, 53324,
                30976, 99208, 80718, 52445, 73395, 40217, 33643, 36508, 90208, 91303, 34404, 97564,
                29821, 27425, 74517, 90651, 76773, 99686, 12916, 5795, 35846, 80884, 25122, 64166,
                51069, 72109, 82377, 3920, 36628, 65041, 8962, 66090, 86583, 70771, 33445, 30052,
                36376, 70294, 60078, 76461, 48266, 21738, 39985, 44344, 50465, 60607, 59176, 87660,
                40368, 62003, 80814, 5940, 3041, 96253, 90980, 3447, 60496, 99630, 52931, 98759,
                85051, 66168, 34452, 92244, 6102, 49672, 33033, 46477, 9716, 15866, 39992, 65605,
                91117, 36515, 27492, 65423, 97974, 28044, 21180, 9459, 58174, 51337, 66634, 6297,
                89043, 12675, 77008, 95979, 78779, 77438, 21664, 69424, 60094, 34904, 56018, 60385,
                46824, 19162, 73558, 69349, 94382, 80846, 82305, 21750, 18276, 86629, 40371, 90369,
                54092, 83322, 56202,
            ],
        )
    }

    #[test]
    fn discussion_case5() {
        test(
            &[
                12309, 46538, 79190, 96635, 73769, 35281, 15988, 75618, 42774, 15791, 78301, 94271,
                48907, 13987, 84963, 5948, 43687, 20376, 71696, 71240, 50081, 1298, 32204, 18458,
                17182, 41522, 29249, 63995, 20131, 80059, 57133, 12479, 77822, 88843, 64747, 8168,
                88000, 86400, 98968, 22057, 84274, 18118, 93110, 67270, 20507, 88351, 48528, 46324,
                21945, 10221, 27836, 73455, 49865, 36652, 92954, 94838, 28140, 90870, 11207, 87721,
                76260, 98443, 93590, 14098, 69876, 83001, 63178, 14222, 72662, 24231, 47760, 4266,
                24313, 61042, 3731, 69993, 35148, 42879, 72497, 30953, 89158, 94382, 80203, 18600,
                1465, 64244, 94244, 64925, 10171, 34158, 25297, 79694, 84257, 1419, 44121, 42707,
                42084, 77788, 47019, 29332, 91308, 25860, 77546, 89502, 35775, 38292, 68395, 80321,
                44443, 45944, 73109, 11069, 3762, 73606, 48550, 52687, 91258, 35438, 66947, 41117,
                83769, 99494, 19466, 7246, 37567, 56840, 96056, 39747, 35760, 25283, 78499, 91212,
                48174, 13137, 10227, 30654, 93071, 45118, 5315, 1980, 9860, 10605, 75622, 45492,
                88325, 38697, 27806, 71683, 50051, 58064, 69561, 16762, 89905, 95420, 57203, 59618,
                12934, 97510, 63446, 9923, 30034, 28203, 58860, 63856, 65106, 29110, 31775, 56568,
                45332, 93560, 78044, 52362, 47515, 46273, 1264, 15459, 29284, 58248, 94489, 43200,
                25628, 76424, 9747, 25747, 20299, 14450, 27196, 36482, 18993, 50616, 96482, 13583,
                13413, 79829, 43953, 10039, 7202, 48961, 14415, 42405, 87893, 37823, 70619, 97979,
                65298, 77519, 94112, 86005, 3535, 83524, 52713, 1420, 23458, 70505, 89211, 43488,
                59329, 66097, 77036, 92165, 30891, 84609, 63359, 58279, 69388, 24529, 80719, 78306,
                30920, 19642, 15281, 85001, 9958, 23053, 94968, 48247, 24688, 97973, 44136, 4516,
                70628, 25312, 2719, 28463, 40925, 11813, 36631, 5514, 60131, 96541, 92103, 18762,
                79783, 47685, 17632,
            ],
            &[
                12309, 79190, 46538, 96635, 73769, 35281, 15988, 84963, 13987, 48907, 94271, 78301,
                15791, 42774, 75618, 5948, 43687, 20376, 71696, 71240, 50081, 1298, 32204, 18458,
                17182, 41522, 29249, 63995, 20131, 80059, 57133, 93590, 98443, 76260, 87721, 11207,
                90870, 28140, 94838, 92954, 36652, 49865, 73455, 27836, 10221, 21945, 46324, 48528,
                88351, 20507, 67270, 93110, 18118, 84274, 22057, 98968, 86400, 88000, 8168, 64747,
                88843, 77822, 12479, 14098, 69876, 83001, 63178, 14222, 72662, 24231, 47760, 4266,
                24313, 61042, 3731, 69993, 35148, 42879, 72497, 30953, 89158, 94382, 80203, 18600,
                1465, 64244, 94244, 64925, 10171, 34158, 25297, 79694, 84257, 1419, 44121, 42707,
                42084, 77788, 47019, 29332, 91308, 25860, 77546, 89502, 35775, 38292, 68395, 80321,
                44443, 45944, 73109, 11069, 3762, 73606, 48550, 52687, 91258, 35438, 66947, 41117,
                83769, 99494, 19466, 7246, 37567, 56840, 96056, 17632, 47685, 79783, 18762, 92103,
                96541, 60131, 5514, 36631, 11813, 40925, 28463, 2719, 25312, 70628, 4516, 44136,
                97973, 24688, 48247, 94968, 23053, 9958, 85001, 15281, 19642, 30920, 78306, 80719,
                24529, 69388, 58279, 63359, 84609, 30891, 92165, 77036, 66097, 59329, 43488, 89211,
                70505, 23458, 1420, 52713, 83524, 3535, 86005, 94112, 77519, 65298, 97979, 70619,
                37823, 87893, 42405, 14415, 48961, 7202, 10039, 43953, 79829, 13413, 13583, 96482,
                50616, 18993, 36482, 27196, 14450, 20299, 25747, 9747, 76424, 25628, 43200, 94489,
                58248, 29284, 15459, 1264, 46273, 47515, 52362, 78044, 93560, 45332, 56568, 31775,
                29110, 65106, 63856, 58860, 28203, 30034, 9923, 63446, 97510, 12934, 59618, 57203,
                95420, 89905, 16762, 69561, 58064, 50051, 71683, 27806, 38697, 88325, 45492, 75622,
                10605, 9860, 1980, 5315, 45118, 93071, 30654, 10227, 13137, 48174, 91212, 78499,
                25283, 35760, 39747,
            ],
        )
    }
}
