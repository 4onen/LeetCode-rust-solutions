// https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups/

pub struct Solution;

// BFS Sol'n
impl Solution {
    pub fn magnificent_sets(n: i32, edges: Vec<Vec<i32>>) -> i32 {
        type Idx = u16;
        const fn find(uf: &[Idx], mut u: Idx) -> Idx {
            while u != uf[u as usize] {
                u = uf[u as usize];
            }
            u
        }
        let n = n as u16;
        let mut adj = vec![vec![]; n as usize];
        let mut uf = (0..n).collect::<Vec<_>>();
        for edge in edges {
            let u = edge[0] as u16 - 1;
            let v = edge[1] as u16 - 1;
            adj[u as usize].push(v);
            adj[v as usize].push(u);
            let pu = find(&mut uf, u);
            let pv = find(&mut uf, v);
            if pu != pv {
                uf[pv as usize] = pu;
            }
        }
        let mut cc_maxes = vec![0; n as usize];
        let mut q = std::collections::VecDeque::new();
        let mut depth = std::vec::Vec::with_capacity(n as usize);
        unsafe {
            depth.set_len(n as usize);
        }
        for i in 0..n {
            depth.fill(0);
            q.clear();
            let mut max = 0;
            q.push_back(i);
            depth[i as usize] = 1;
            while let Some(u) = q.pop_front() {
                let next_depth = depth[u as usize] + 1;
                if depth[u as usize] > max {
                    max = depth[u as usize];
                }
                for &v in &adj[u as usize] {
                    if depth[v as usize] == 0 {
                        q.push_back(v);
                        depth[v as usize] = next_depth;
                    } else if Idx::abs_diff(depth[v as usize], depth[u as usize]) != 1 {
                        return -1;
                    }
                }
            }
            let cc = find(&mut uf, i);
            if cc_maxes[cc as usize] < max {
                cc_maxes[cc as usize] = max;
            }
        }
        cc_maxes.iter().sum::<u16>() as i32
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn test(n: u16, edges: &[[u16; 2]], expected: i16) {
        assert!(n >= 1);
        assert!(n <= 500);
        if expected > 0 {
            assert!(expected as u16 <= n);
        } else {
            assert_eq!(expected, -1);
        }
        assert!(edges.len() >= 1);
        assert!(edges.len() <= 10_000);
        let mut seen = std::collections::HashSet::new();
        for &[a, b] in edges {
            assert!(a >= 1);
            assert!(b >= 1);
            assert!(a <= n);
            assert!(b <= n);
            assert_ne!(a, b);
            assert!(seen.insert([a, b]));
            assert!(seen.insert([b, a]));
        }
        let res = Solution::magnificent_sets(
            n as i32,
            edges
                .iter()
                .map(|&x| x.iter().map(|&x| x as i32).collect())
                .collect(),
        );
        assert!(res <= n as i32);
        assert_eq!(res, expected as i32);
    }

    #[test]
    fn ex1() {
        test(6, &[[1, 2], [1, 4], [1, 5], [2, 6], [2, 3], [4, 6]], 4)
    }

    #[test]
    fn ex2() {
        test(3, &[[1, 2], [2, 3], [3, 1]], -1);
    }

    #[test]
    fn discussion_case1() {
        test(6, &[[1, 2], [3, 4], [5, 6]], 6);
    }

    #[test]
    fn discussion_case2() {
        test(2, &[[1, 2]], 2)
    }

    #[test]
    fn discussion_case3() {
        test(30, &[[16, 8], [6, 5]], 30)
    }

    #[test]
    fn discussion_case4() {
        test(5, &[[1, 2], [1, 3], [1, 4], [1, 5]], 3)
    }

    #[test]
    fn discussion_case8() {
        // 1 - 4&8 - 5&6&7 - 2&3
        test(
            8,
            &[
                [5, 3],
                [5, 8],
                [7, 2],
                [5, 4],
                [6, 4],
                [6, 3],
                [5, 2],
                [6, 2],
                [1, 8],
                [6, 8],
                [7, 4],
                [7, 3],
                [7, 8],
                [1, 4],
            ],
            4,
        )
    }

    #[test]
    fn discussion_case8_1() {
        // 1 - 4&8 - 5&6&7 - 2&3
        test(
            8,
            &[
                [1, 4],
                [1, 8],
                [2, 5],
                [2, 6],
                [2, 7],
                [3, 5],
                [3, 6],
                [3, 7],
                [4, 5],
                [4, 6],
                [4, 7],
                [8, 5],
                [8, 6],
                [8, 7],
            ],
            4,
        )
    }

    #[test]
    fn discussion_case8_2() {
        // 1 - 4&6 - 5 - 2&3
        test(6, &[[1, 4], [1, 6], [2, 5], [3, 5], [4, 5], [6, 5]], 4)
    }

    #[test]
    fn discussion_case8_3() {
        // 1 - 4&6 - 5 - 2
        // 3
        test(6, &[[1, 4], [1, 6], [2, 5], [4, 5], [6, 5]], 5)
    }

    #[test]
    fn discussion_case24() {
        test(
            24,
            &[
                [2, 13],
                [7, 3],
                [5, 3],
                [21, 1],
                [5, 1],
                [4, 13],
                [21, 19],
                [7, 13],
                [15, 3],
                [21, 22],
                [17, 19],
                [23, 22],
                [14, 13],
            ],
            19,
        )
    }

    #[test]
    fn discussion_case14() {
        test(
            14,
            &[
                [1, 4],
                [3, 4],
                [9, 8],
                [12, 8],
                [11, 8],
                [11, 5],
                [6, 4],
                [3, 5],
                [1, 8],
                [13, 4],
                [9, 5],
                [9, 4],
                [12, 5],
                [7, 5],
                [2, 4],
                [3, 8],
                [1, 5],
                [12, 4],
                [11, 4],
                [10, 4],
                [14, 5],
                [14, 8],
            ],
            5,
        )
    }

    #[test]
    fn discussion_case30() {
        test(
            30,
            &[
                [1, 9],
                [30, 27],
                [21, 9],
                [2, 10],
                [16, 28],
                [1, 27],
                [20, 24],
                [22, 24],
                [30, 6],
                [30, 19],
                [1, 19],
                [30, 11],
                [16, 6],
                [16, 29],
                [2, 29],
                [2, 23],
                [16, 24],
                [1, 25],
                [1, 17],
                [16, 23],
                [30, 26],
                [16, 12],
                [1, 14],
                [13, 23],
                [13, 14],
                [2, 19],
                [22, 6],
                [30, 3],
                [30, 18],
                [20, 8],
                [13, 24],
                [20, 9],
                [20, 14],
                [13, 28],
                [13, 10],
                [2, 8],
                [16, 7],
                [16, 10],
                [21, 5],
                [20, 15],
                [20, 11],
                [2, 26],
                [21, 3],
                [22, 10],
                [16, 8],
                [2, 17],
            ],
            8,
        )
    }

    #[test]
    fn discussion_case26() {
        test(
            26,
            &[
                [9, 16],
                [8, 3],
                [20, 21],
                [12, 16],
                [14, 3],
                [7, 21],
                [22, 3],
                [22, 18],
                [11, 16],
                [25, 4],
                [2, 4],
                [14, 21],
                [23, 3],
                [17, 3],
                [2, 16],
                [24, 16],
                [13, 4],
                [10, 21],
                [7, 4],
                [9, 18],
                [14, 18],
                [14, 4],
                [14, 16],
                [1, 3],
                [25, 18],
                [17, 4],
                [1, 16],
                [23, 4],
                [2, 21],
                [5, 16],
                [24, 18],
                [20, 18],
                [19, 16],
                [24, 21],
                [9, 3],
                [24, 3],
                [19, 18],
                [25, 16],
                [19, 21],
                [6, 3],
                [26, 18],
                [5, 21],
                [20, 16],
                [2, 3],
                [10, 18],
                [26, 16],
                [8, 4],
                [11, 21],
                [23, 16],
                [13, 16],
                [25, 3],
                [7, 18],
                [19, 3],
                [20, 4],
                [26, 3],
                [23, 18],
                [15, 18],
                [17, 18],
                [10, 16],
                [26, 21],
                [23, 21],
                [7, 16],
                [8, 18],
                [10, 4],
                [24, 4],
                [7, 3],
                [11, 18],
                [9, 4],
                [26, 4],
                [13, 21],
                [22, 16],
                [22, 21],
                [20, 3],
                [6, 18],
                [9, 21],
                [10, 3],
                [22, 4],
                [1, 18],
                [25, 21],
                [11, 4],
                [1, 21],
                [15, 3],
                [1, 4],
                [15, 16],
                [2, 18],
                [13, 3],
                [8, 21],
                [13, 18],
                [11, 3],
                [15, 21],
                [8, 16],
                [17, 16],
                [15, 4],
                [12, 3],
                [6, 4],
                [17, 21],
                [5, 18],
                [6, 16],
                [6, 21],
                [12, 4],
                [19, 4],
                [5, 3],
                [12, 21],
                [5, 4],
            ],
            4,
        )
    }

    #[test]
    fn discussion_case52() {
        test(
            52,
            &[
                [20, 37],
                [36, 37],
                [36, 16],
                [52, 27],
                [50, 51],
                [10, 8],
                [10, 42],
                [4, 51],
                [52, 28],
                [50, 3],
                [45, 8],
                [24, 47],
                [14, 34],
                [25, 19],
                [4, 32],
                [14, 43],
                [46, 28],
                [45, 39],
                [46, 30],
                [50, 34],
                [20, 26],
                [45, 9],
                [52, 32],
                [24, 32],
                [4, 2],
                [17, 12],
                [38, 9],
                [10, 7],
                [14, 3],
                [38, 35],
                [14, 48],
                [45, 43],
                [52, 43],
                [17, 34],
                [4, 33],
                [14, 15],
                [24, 28],
                [10, 30],
                [24, 51],
                [10, 13],
                [20, 8],
                [36, 30],
                [14, 18],
                [38, 11],
                [24, 49],
                [50, 37],
                [4, 27],
                [45, 51],
                [52, 19],
                [23, 39],
                [17, 51],
                [10, 41],
                [17, 37],
                [24, 44],
                [20, 7],
                [23, 26],
                [50, 15],
                [50, 39],
                [23, 6],
                [36, 41],
                [52, 29],
                [20, 9],
                [17, 22],
                [24, 35],
                [52, 30],
                [4, 37],
                [17, 32],
                [20, 2],
                [46, 33],
                [20, 30],
                [23, 29],
                [52, 3],
                [38, 34],
                [4, 49],
                [4, 16],
                [38, 8],
                [25, 18],
                [20, 11],
                [10, 29],
                [24, 39],
                [24, 1],
                [24, 48],
                [24, 18],
                [14, 9],
                [17, 31],
                [36, 27],
                [4, 26],
                [36, 49],
                [24, 3],
                [4, 18],
                [23, 21],
                [4, 31],
                [36, 2],
                [36, 22],
                [36, 28],
                [14, 7],
                [52, 48],
                [14, 12],
                [46, 18],
                [20, 15],
                [4, 47],
                [50, 11],
                [52, 6],
                [23, 22],
                [38, 3],
                [17, 49],
                [14, 29],
                [10, 33],
                [24, 43],
                [50, 2],
                [25, 5],
                [24, 41],
                [45, 32],
                [52, 40],
                [4, 13],
                [25, 7],
                [50, 28],
                [17, 42],
                [23, 41],
                [46, 16],
                [52, 5],
                [50, 48],
                [45, 26],
                [50, 9],
                [36, 15],
                [36, 19],
                [50, 19],
                [10, 51],
                [20, 3],
                [50, 8],
                [23, 44],
                [20, 6],
                [52, 11],
                [23, 51],
                [50, 30],
                [36, 1],
                [14, 13],
                [45, 22],
                [46, 8],
                [23, 34],
                [17, 30],
                [10, 16],
                [36, 6],
                [23, 31],
                [10, 12],
                [14, 39],
                [45, 5],
                [25, 47],
                [17, 27],
                [20, 5],
                [25, 37],
                [17, 29],
                [38, 6],
                [24, 15],
                [36, 48],
                [52, 37],
                [38, 31],
                [24, 7],
                [45, 1],
                [20, 19],
                [25, 1],
                [52, 34],
                [24, 22],
                [17, 28],
                [14, 35],
                [38, 30],
                [23, 8],
                [38, 48],
                [14, 28],
                [24, 16],
                [25, 9],
                [4, 19],
                [23, 7],
                [46, 19],
                [24, 2],
                [10, 15],
                [4, 44],
                [14, 5],
                [36, 34],
                [10, 44],
                [14, 47],
                [17, 7],
                [14, 41],
                [17, 39],
                [38, 44],
                [20, 44],
                [38, 12],
                [10, 6],
                [36, 21],
                [14, 11],
                [38, 21],
                [38, 18],
                [14, 32],
                [46, 26],
                [45, 3],
                [10, 1],
                [38, 49],
                [46, 39],
                [23, 1],
                [20, 33],
                [20, 13],
                [50, 41],
                [50, 7],
                [17, 21],
                [46, 51],
                [14, 37],
                [20, 1],
                [10, 11],
                [25, 3],
                [46, 47],
                [23, 2],
                [20, 29],
                [4, 6],
                [10, 39],
                [14, 44],
                [10, 34],
                [24, 27],
                [50, 35],
                [46, 2],
                [23, 43],
                [4, 7],
                [50, 13],
                [20, 34],
                [17, 40],
                [38, 40],
                [10, 49],
                [10, 2],
                [24, 21],
                [24, 31],
                [38, 39],
                [4, 35],
                [25, 31],
                [46, 1],
                [17, 15],
                [45, 40],
                [52, 15],
                [20, 31],
                [24, 37],
                [52, 44],
                [17, 16],
                [17, 11],
                [23, 19],
                [52, 49],
                [14, 21],
                [38, 32],
                [17, 19],
                [25, 40],
                [25, 26],
                [52, 8],
                [17, 9],
                [4, 39],
                [36, 26],
                [46, 15],
                [36, 47],
                [25, 33],
                [17, 13],
                [25, 16],
                [20, 27],
                [52, 21],
                [38, 37],
                [52, 13],
                [4, 43],
                [50, 43],
                [46, 44],
                [20, 51],
                [14, 40],
                [45, 13],
                [10, 28],
                [20, 16],
                [50, 22],
                [17, 18],
                [45, 37],
                [45, 6],
                [50, 27],
                [52, 41],
                [38, 7],
                [52, 42],
                [38, 33],
                [17, 47],
                [24, 33],
                [23, 15],
                [14, 42],
                [38, 27],
                [24, 13],
                [50, 40],
                [36, 44],
                [24, 5],
                [25, 43],
                [52, 12],
                [46, 41],
                [23, 5],
                [25, 51],
                [4, 8],
                [36, 39],
                [24, 30],
                [46, 49],
                [24, 11],
                [50, 12],
                [52, 9],
                [20, 21],
                [45, 47],
                [46, 40],
                [38, 5],
                [36, 51],
                [50, 6],
                [23, 28],
                [46, 7],
                [20, 43],
                [14, 6],
                [14, 22],
                [10, 47],
                [25, 49],
                [38, 16],
                [20, 35],
                [20, 49],
                [25, 41],
                [52, 33],
                [25, 27],
                [36, 35],
                [17, 5],
                [4, 42],
                [14, 31],
                [50, 32],
                [4, 9],
                [52, 47],
                [46, 22],
                [14, 2],
                [14, 51],
                [20, 28],
                [45, 42],
                [38, 41],
                [14, 30],
                [45, 33],
                [20, 41],
                [4, 15],
                [38, 43],
                [4, 22],
                [20, 47],
                [50, 16],
                [38, 51],
                [10, 19],
                [10, 35],
                [52, 22],
                [50, 42],
                [36, 5],
                [24, 6],
                [20, 32],
                [4, 11],
                [23, 30],
                [38, 22],
                [52, 7],
                [23, 12],
                [52, 51],
                [36, 40],
                [46, 48],
                [17, 3],
                [46, 27],
                [36, 29],
                [46, 31],
                [52, 39],
                [4, 34],
                [23, 32],
                [38, 47],
                [36, 33],
                [23, 40],
                [45, 27],
                [45, 44],
                [25, 22],
                [50, 18],
                [17, 26],
                [36, 11],
                [45, 29],
                [4, 3],
                [4, 30],
                [4, 29],
                [50, 26],
                [52, 35],
                [50, 49],
                [17, 41],
                [38, 1],
                [4, 12],
                [24, 9],
                [50, 29],
                [46, 42],
                [38, 29],
                [20, 40],
                [20, 39],
                [23, 27],
                [23, 37],
                [14, 8],
                [45, 12],
                [10, 26],
                [50, 31],
                [25, 8],
                [14, 19],
            ],
            4,
        )
    }
}
