// https://leetcode.com/problems/count-and-say/

pub struct Solution;

// Solution 1: String iteration plus LUT
// impl Solution {
//     pub fn count_and_say(n: i32) -> String {
//         const COUNT_AND_SAY_LUT: &[&str] = &[
//             "",
//             "1",
//             "11",
//             "21",
//             "1211",
//             "111221",
//             "312211",
//             "13112221",
//             "1113213211",
//             "31131211131221",
//             "13211311123113112211",
//             "11131221133112132113212221",
//             "3113112221232112111312211312113211",
//             "1321132132111213122112311311222113111221131221",
//             "11131221131211131231121113112221121321132132211331222113112211",
//             "311311222113111231131112132112311321322112111312211312111322212311322113212221",
//             "132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211",
//         ];
//         let n = n as u8;
//         let mut prev = COUNT_AND_SAY_LUT
//             [std::cmp::min(n, COUNT_AND_SAY_LUT.len() as u8 - 1u8) as usize]
//             .to_string();
//         for _ in COUNT_AND_SAY_LUT.len() as u8..=n {
//             let mut next = String::with_capacity(prev.len() * 2);
//             let mut bytes = prev.bytes();
//             let mut prev_char = bytes.next().unwrap();
//             let mut count = 1;
//             for c in bytes {
//                 if c == prev_char {
//                     count += 1;
//                 } else {
//                     next.push_str(&count.to_string());
//                     next.push(prev_char as char);
//                     prev_char = c;
//                     count = 1;
//                 }
//             }
//             next.push_str(&count.to_string());
//             next.push(prev_char as char);
//             prev = next;
//         }
//         prev
//     }
// }

// Solution 2: u8 iteration
impl Solution {
    pub fn count_and_say(n: i32) -> String {
        let n = n as usize;
        let mut prev = vec![1u8];
        for _ in 1..n {
            let mut next = Vec::with_capacity(prev.len() * 2);
            let mut prev_digit = prev[0];
            let mut count = 1;
            for digit in prev.into_iter().skip(1) {
                if digit == prev_digit {
                    count += 1;
                } else {
                    next.push(count);
                    next.push(prev_digit);
                    prev_digit = digit;
                    count = 1;
                }
            }
            next.push(count);
            next.push(prev_digit);
            prev = next;
        }
        prev.into_iter()
            .map(|digit| (digit + b'0') as char)
            .collect()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn ex1() {
        assert_eq!(Solution::count_and_say(1), "1");
    }

    #[test]
    fn ex2() {
        assert_eq!(Solution::count_and_say(4), "1211");
    }

    #[test]
    fn case2() {
        assert_eq!(Solution::count_and_say(2), "11");
    }

    #[test]
    fn case3() {
        assert_eq!(Solution::count_and_say(3), "21");
    }

    #[test]
    fn case5() {
        assert_eq!(Solution::count_and_say(5), "111221");
    }

    #[test]
    fn case6() {
        assert_eq!(Solution::count_and_say(6), "312211");
    }

    #[test]
    fn case7() {
        assert_eq!(Solution::count_and_say(7), "13112221");
    }

    #[test]
    fn case8() {
        assert_eq!(Solution::count_and_say(8), "1113213211");
    }

    #[test]
    fn case9() {
        assert_eq!(Solution::count_and_say(9), "31131211131221");
    }

    #[test]
    fn case30() {
        assert_eq!(
            Solution::count_and_say(30),

        );
    }
}
