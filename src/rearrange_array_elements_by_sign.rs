// https://leetcode.com/problems/rearrange-array-elements-by-sign/

pub struct Solution;

// Braindead sol'n
// impl Solution {
//     pub fn rearrange_array(nums: Vec<i32>) -> Vec<i32> {
//         let positives = nums.iter().filter(|&x| *x > 0);
//         let negatives = nums.iter().filter(|&x| *x < 0);
//         let mut result = std::vec::Vec::with_capacity(nums.len());
//         for (p, n) in std::iter::zip(positives, negatives) {
//             result.push(*p);
//             result.push(*n);
//         }
//         result
//     }
// }

// One-pass sol'n
impl Solution {
    pub fn rearrange_array(nums: Vec<i32>) -> Vec<i32> {
        let nums_len: usize = nums.len();
        let mut result: Vec<i32> = vec![0; nums_len];
        let mut positive_idx = (0..nums_len).into_iter().step_by(2);
        let mut negative_idx = (1..nums_len).into_iter().step_by(2);
        for num in nums {
            if num > 0 {
                result[positive_idx.next().unwrap()] = num;
            } else {
                result[negative_idx.next().unwrap()] = num;
            }
        }
        result
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn ex1() {
        let nums = vec![3, 1, -2, -5, 2, -4];
        let expected = vec![3, -2, 1, -5, 2, -4];
        assert_eq!(Solution::rearrange_array(nums), expected);
    }

    #[test]
    fn ex2() {
        let nums = vec![-1, 1];
        let expected = vec![1, -1];
        assert_eq!(Solution::rearrange_array(nums), expected);
    }

    #[test]
    fn myex1() {
        let nums = vec![1, -1];
        let expected = vec![1, -1];
        assert_eq!(Solution::rearrange_array(nums), expected);
    }

    #[test]
    fn discussion_case1() {
        let nums = vec![-8543, 885, -3207, 9720];
        let expected = vec![885, -8543, 9720, -3207];
        assert_eq!(Solution::rearrange_array(nums), expected);
    }

    #[test]
    fn discussion_case2() {
        let nums = vec![-2113, 4281, -1651, 1938, 6576, -4820];
        let expected = vec![4281, -2113, 1938, -1651, 6576, -4820];
        assert_eq!(Solution::rearrange_array(nums), expected);
    }

    #[test]
    fn discussion_case3() {
        let nums = vec![
            -693, 8403, -7995, -9284, -2721, -7216, 6009, 6485, -296, -7649, 9972, -8158, -8806,
            -5775, 9952, -4806, 7797, 3018, 4440, -9902, 4741, 9691, 5793, 8434, 9754, 2624, 3760,
            -6103, 5229, 356, 3220, -540, -5554, 9512, -7702, -2819, -7706, -7277, 4794, -6940,
        ];
        let expected = vec![
            8403, -693, 6009, -7995, 6485, -9284, 9972, -2721, 9952, -7216, 7797, -296, 3018,
            -7649, 4440, -8158, 4741, -8806, 9691, -5775, 5793, -4806, 8434, -9902, 9754, -6103,
            2624, -540, 3760, -5554, 5229, -7702, 356, -2819, 3220, -7706, 9512, -7277, 4794,
            -6940,
        ];
        assert_eq!(Solution::rearrange_array(nums), expected);
    }

    #[test]
    fn discussion_case4() {
        let nums = vec![
            -1828, 6549, 5209, -3100, 1120, -1696, -9328, 3808, 4749, -6779, 7690, 5384, -3057,
            -4453, -2133, -1798, 935, 9028, 7697, 8430, -2154, -6263, 8817, -2441, 1735, -5920,
            -3426, -7461, 3515, -8008, 3105, 2948, -2361, 9923, 3407, -738, -8544, -1357, -9946,
            8721, 6449, 3549, 2922, -320, 8587, -1946, 1657, 2770, 9790, -4014, 7229, -7074, -5891,
            1622, 5096, 1586, -6962, -9258, -7705, -3238, -4710, 8429, 4140, -3528, -9387, 9891,
            9412, 8512, -844, 4715, 1028, -2313, -5180, -8787, 4299, 3272, 6344, 8683, -8607,
            -8097, -7655, -7893, -892, -9293, 1569, -1001, -4910, -3497, 7759, -356, -519, -3484,
            5462, -525, 9448, -9641, 5307, -8192, 2305, -8737, 4130, -1528, -4067, 9418, -7554,
            430, -6642, -3235, -8712, -8886, 6831, 4112, 3769, 5100, 7727, -4109, -7010, -4124,
            4194, -7396, -5638, -356, -7665, -8565, -7352, 2483, 3900, 7891, -7128, 8264, 6733,
            1175, -378, 5315, -7957, -3906, -5891, -4494, -6175, -1761, -9274, -5222, 5993, 9297,
            4286, -7070, 2601, 888, -5719, 3536, 3334, 380, 6447, -2507, -7459, 6918, -4229, -2464,
            845, 530, 8587, -5028, 7606, -1863, 3952, 2917, 605, -4029, 8635, 6800, -523, -436,
            -3117, 3383, 5901, -8989, -8937, 9268, 8620, -5250, 1003, 9901, -4670, -3972, -8803,
            -3824, -7240, 9825, 4036, -6578, -6656, 6387, 1417, -8318, -2313, 5949, 5229, -5233,
            51, -8866, 5407, -3200, -6676, 9077, -1713, 9745, -5245, 7232, -3108, 9742, -7946,
            -5940, -7148, 3945, 9488, -310, -9243, 2324, 5801, 2555, -43, -7034, -8329, 9253,
            -2431, 1064, 4529, -9896, -7962, 8974, -889, -1800, 7027, 5, 2056, -4137, 5395, -3812,
            2201, -3447, 1761, -6199, 6951, 980, 4027, 4463, -3080, -8666, 8753, -1301, -2634,
            2651, 6082, 6920, 3867, -7119, -2420, -2846, -965, -5580, -5220, -3744, 3481, 1669,
            -3129, 7974, -4727, 4789, 3306, -3214, -1016, 1558, -9502, 9124, 7480, -9852, 8320,
            -4955, 7201, -7714, 8763, 798, -4763, -1108, -8694, -6257, 9599, 7496, 3811, -3866,
            -7027, 5554, 5586, -2747, 4536, 2745, -2193, 3731, 8033, 2185, 4437, -4009, -867,
            -7174, -2073, 2647, 8990, 7571, 1203, 4467, -3506, 819, -7469, 7426, 531, -8693, 1769,
            8707, -4522, -8945, -7040, -2700, -536, -5343, 2153, -3390, -1004, -2236, -4420, 3954,
            -6878, 7405, 7, -3046, 6091, 484, 6860, -5295, 9541, 251, -7736, 3295, 4137, -1283,
            -9434, -2216, -8984, -7100, -9995, -1627, 6266, 3118, 8079, -8798, 5248, 2743, -6036,
            -9252, -8344, 1212, 7300, -2656, 206, -3633, 6275, 2752, 911, -1083, 6934, 6112, 5241,
            47, -4373, 4737, -3543, -1694, -1249, 3469, 9518, 2055, 7344, 1299, 8428, -2205, 7198,
            1862, 7592, 7257, 9246, 2431, -9127, 4691, -2378, -421, -8524, -7837, 3822, -1383,
            -2258, -3872, 1862, 9787, -4945, -5400, -1844, -9129, 1376, 1401, -5852, 5592, -7648,
            -2343, -2854, -9272, 9207, -4569, 6234, 6098, 6370, 5795, 9297, -1240, 4719, 5655,
            -6353, -3170, 9418, -4672, -3407, -3341, 2608, 1302, 3570, -7568, -9342, -996, -4535,
            -9167, 5449, -9396, 5370, 8746, -286, 2367, -3199, 8609, -878, 1400, 1388, 9699, 4950,
            5282, -5012, -7215, 5646, -9861, 156, 3157, 6689, -6572, -727, 9045, 9003, 6702, 7417,
            -6257, -6640, 9556, -1573, -8067, -9257, 5076, 9780, 526, -3608, 9189, 2812, -7914,
            -2524, -895, 7592, 894, 4182, -5076, -2696, -6914, 5211, 2277, -9352, -9204, 6145,
            1214, -7398, -4765, 1489, 4617, 6035, 4451, -4565, -352,
        ];
        let expected = vec![
            6549, -1828, 5209, -3100, 1120, -1696, 3808, -9328, 4749, -6779, 7690, -3057, 5384,
            -4453, 935, -2133, 9028, -1798, 7697, -2154, 8430, -6263, 8817, -2441, 1735, -5920,
            3515, -3426, 3105, -7461, 2948, -8008, 9923, -2361, 3407, -738, 8721, -8544, 6449,
            -1357, 3549, -9946, 2922, -320, 8587, -1946, 1657, -4014, 2770, -7074, 9790, -5891,
            7229, -6962, 1622, -9258, 5096, -7705, 1586, -3238, 8429, -4710, 4140, -3528, 9891,
            -9387, 9412, -844, 8512, -2313, 4715, -5180, 1028, -8787, 4299, -8607, 3272, -8097,
            6344, -7655, 8683, -7893, 1569, -892, 7759, -9293, 5462, -1001, 9448, -4910, 5307,
            -3497, 2305, -356, 4130, -519, 9418, -3484, 430, -525, 6831, -9641, 4112, -8192, 3769,
            -8737, 5100, -1528, 7727, -4067, 4194, -7554, 2483, -6642, 3900, -3235, 7891, -8712,
            8264, -8886, 6733, -4109, 1175, -7010, 5315, -4124, 5993, -7396, 9297, -5638, 4286,
            -356, 2601, -7665, 888, -8565, 3536, -7352, 3334, -7128, 380, -378, 6447, -7957, 6918,
            -3906, 845, -5891, 530, -4494, 8587, -6175, 7606, -1761, 3952, -9274, 2917, -5222, 605,
            -7070, 8635, -5719, 6800, -2507, 3383, -7459, 5901, -4229, 9268, -2464, 8620, -5028,
            1003, -1863, 9901, -4029, 9825, -523, 4036, -436, 6387, -3117, 1417, -8989, 5949,
            -8937, 5229, -5250, 51, -4670, 5407, -3972, 9077, -8803, 9745, -3824, 7232, -7240,
            9742, -6578, 3945, -6656, 9488, -8318, 2324, -2313, 5801, -5233, 2555, -8866, 9253,
            -3200, 1064, -6676, 4529, -1713, 8974, -5245, 7027, -3108, 5, -7946, 2056, -5940, 5395,
            -7148, 2201, -310, 1761, -9243, 6951, -43, 980, -7034, 4027, -8329, 4463, -2431, 8753,
            -9896, 2651, -7962, 6082, -889, 6920, -1800, 3867, -4137, 3481, -3812, 1669, -3447,
            7974, -6199, 4789, -3080, 3306, -8666, 1558, -1301, 9124, -2634, 7480, -7119, 8320,
            -2420, 7201, -2846, 8763, -965, 798, -5580, 9599, -5220, 7496, -3744, 3811, -3129,
            5554, -4727, 5586, -3214, 4536, -1016, 2745, -9502, 3731, -9852, 8033, -4955, 2185,
            -7714, 4437, -4763, 2647, -1108, 8990, -8694, 7571, -6257, 1203, -3866, 4467, -7027,
            819, -2747, 7426, -2193, 531, -4009, 1769, -867, 8707, -7174, 2153, -2073, 3954, -3506,
            7405, -7469, 7, -8693, 6091, -4522, 484, -8945, 6860, -7040, 9541, -2700, 251, -536,
            3295, -5343, 4137, -3390, 6266, -1004, 3118, -2236, 8079, -4420, 5248, -6878, 2743,
            -3046, 1212, -5295, 7300, -7736, 206, -1283, 6275, -9434, 2752, -2216, 911, -8984,
            6934, -7100, 6112, -9995, 5241, -1627, 47, -8798, 4737, -6036, 3469, -9252, 9518,
            -8344, 2055, -2656, 7344, -3633, 1299, -1083, 8428, -4373, 7198, -3543, 1862, -1694,
            7592, -1249, 7257, -2205, 9246, -9127, 2431, -2378, 4691, -421, 3822, -8524, 1862,
            -7837, 9787, -1383, 1376, -2258, 1401, -3872, 5592, -4945, 9207, -5400, 6234, -1844,
            6098, -9129, 6370, -5852, 5795, -7648, 9297, -2343, 4719, -2854, 5655, -9272, 9418,
            -4569, 2608, -1240, 1302, -6353, 3570, -3170, 5449, -4672, 5370, -3407, 8746, -3341,
            2367, -7568, 8609, -9342, 1400, -996, 1388, -4535, 9699, -9167, 4950, -9396, 5282,
            -286, 5646, -3199, 156, -878, 3157, -5012, 6689, -7215, 9045, -9861, 9003, -6572, 6702,
            -727, 7417, -6257, 9556, -6640, 5076, -1573, 9780, -8067, 526, -9257, 9189, -3608,
            2812, -7914, 7592, -2524, 894, -895, 4182, -5076, 5211, -2696, 2277, -6914, 6145,
            -9352, 1214, -9204, 1489, -7398, 4617, -4765, 6035, -4565, 4451, -352,
        ];
        assert_eq!(Solution::rearrange_array(nums), expected);
    }
}
